// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class Node;
class SyncOffset;
class CmdRequest;
class CmdRequest_Sync;
class CmdRequest_Set;
class CmdRequest_Get;
class CmdRequest_Del;
class CmdRequest_Info;
class CmdRequest_Mget;
class CmdResponse;
class CmdResponse_Sync;
class CmdResponse_Get;
class CmdResponse_InfoStats;
class CmdResponse_InfoCapacity;
class CmdResponse_InfoPartition;
class CmdResponse_Mget;
class BinlogSkip;
class SyncRequest;

enum Type {
  SYNC = 0,
  SET = 1,
  GET = 2,
  DEL = 3,
  INFOSTATS = 4,
  INFOCAPACITY = 5,
  INFOPARTITION = 6,
  MGET = 7
};
bool Type_IsValid(int value);
const Type Type_MIN = SYNC;
const Type Type_MAX = MGET;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum SyncType {
  CMD = 0,
  SKIP = 1
};
bool SyncType_IsValid(int value);
const SyncType SyncType_MIN = CMD;
const SyncType SyncType_MAX = SKIP;
const int SyncType_ARRAYSIZE = SyncType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncType_descriptor();
inline const ::std::string& SyncType_Name(SyncType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncType_descriptor(), value);
}
inline bool SyncType_Parse(
    const ::std::string& name, SyncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncType>(
    SyncType_descriptor(), name, value);
}
enum StatusCode {
  kOk = 0,
  kNotFound = 1,
  kWait = 2,
  kError = 3,
  kFallback = 4
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kFallback;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class SyncOffset : public ::google::protobuf::Message {
 public:
  SyncOffset();
  virtual ~SyncOffset();

  SyncOffset(const SyncOffset& from);

  inline SyncOffset& operator=(const SyncOffset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncOffset& default_instance();

  void Swap(SyncOffset* other);

  // implements Message ----------------------------------------------

  SyncOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncOffset& from);
  void MergeFrom(const SyncOffset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 filenum = 1;
  inline bool has_filenum() const;
  inline void clear_filenum();
  static const int kFilenumFieldNumber = 1;
  inline ::google::protobuf::int32 filenum() const;
  inline void set_filenum(::google::protobuf::int32 value);

  // required int64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // optional int32 partition = 3;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 3;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client.SyncOffset)
 private:
  inline void set_has_filenum();
  inline void clear_has_filenum();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_partition();
  inline void clear_has_partition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 filenum_;
  ::google::protobuf::int32 partition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static SyncOffset* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Sync : public ::google::protobuf::Message {
 public:
  CmdRequest_Sync();
  virtual ~CmdRequest_Sync();

  CmdRequest_Sync(const CmdRequest_Sync& from);

  inline CmdRequest_Sync& operator=(const CmdRequest_Sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Sync& default_instance();

  void Swap(CmdRequest_Sync* other);

  // implements Message ----------------------------------------------

  CmdRequest_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Sync& from);
  void MergeFrom(const CmdRequest_Sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::client::Node& node() const;
  inline ::client::Node* mutable_node();
  inline ::client::Node* release_node();
  inline void set_allocated_node(::client::Node* node);

  // required string table_name = 2;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 2;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required .client.SyncOffset sync_offset = 3;
  inline bool has_sync_offset() const;
  inline void clear_sync_offset();
  static const int kSyncOffsetFieldNumber = 3;
  inline const ::client::SyncOffset& sync_offset() const;
  inline ::client::SyncOffset* mutable_sync_offset();
  inline ::client::SyncOffset* release_sync_offset();
  inline void set_allocated_sync_offset(::client::SyncOffset* sync_offset);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Sync)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_sync_offset();
  inline void clear_has_sync_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::Node* node_;
  ::std::string* table_name_;
  ::client::SyncOffset* sync_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Sync* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Set : public ::google::protobuf::Message {
 public:
  CmdRequest_Set();
  virtual ~CmdRequest_Set();

  CmdRequest_Set(const CmdRequest_Set& from);

  inline CmdRequest_Set& operator=(const CmdRequest_Set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Set& default_instance();

  void Swap(CmdRequest_Set* other);

  // implements Message ----------------------------------------------

  CmdRequest_Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Set& from);
  void MergeFrom(const CmdRequest_Set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional string uuid = 4;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 4;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Set)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* key_;
  ::std::string* value_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Set* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Get : public ::google::protobuf::Message {
 public:
  CmdRequest_Get();
  virtual ~CmdRequest_Get();

  CmdRequest_Get(const CmdRequest_Get& from);

  inline CmdRequest_Get& operator=(const CmdRequest_Get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Get& default_instance();

  void Swap(CmdRequest_Get* other);

  // implements Message ----------------------------------------------

  CmdRequest_Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Get& from);
  void MergeFrom(const CmdRequest_Get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Get)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* key_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Get* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Del : public ::google::protobuf::Message {
 public:
  CmdRequest_Del();
  virtual ~CmdRequest_Del();

  CmdRequest_Del(const CmdRequest_Del& from);

  inline CmdRequest_Del& operator=(const CmdRequest_Del& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Del& default_instance();

  void Swap(CmdRequest_Del* other);

  // implements Message ----------------------------------------------

  CmdRequest_Del* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Del& from);
  void MergeFrom(const CmdRequest_Del& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Del)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* key_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Del* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Info : public ::google::protobuf::Message {
 public:
  CmdRequest_Info();
  virtual ~CmdRequest_Info();

  CmdRequest_Info(const CmdRequest_Info& from);

  inline CmdRequest_Info& operator=(const CmdRequest_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Info& default_instance();

  void Swap(CmdRequest_Info* other);

  // implements Message ----------------------------------------------

  CmdRequest_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Info& from);
  void MergeFrom(const CmdRequest_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Info)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Info* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest_Mget : public ::google::protobuf::Message {
 public:
  CmdRequest_Mget();
  virtual ~CmdRequest_Mget();

  CmdRequest_Mget(const CmdRequest_Mget& from);

  inline CmdRequest_Mget& operator=(const CmdRequest_Mget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest_Mget& default_instance();

  void Swap(CmdRequest_Mget* other);

  // implements Message ----------------------------------------------

  CmdRequest_Mget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest_Mget& from);
  void MergeFrom(const CmdRequest_Mget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // repeated string keys = 2;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // @@protoc_insertion_point(class_scope:client.CmdRequest.Mget)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest_Mget* default_instance_;
};
// -------------------------------------------------------------------

class CmdRequest : public ::google::protobuf::Message {
 public:
  CmdRequest();
  virtual ~CmdRequest();

  CmdRequest(const CmdRequest& from);

  inline CmdRequest& operator=(const CmdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdRequest& default_instance();

  void Swap(CmdRequest* other);

  // implements Message ----------------------------------------------

  CmdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdRequest& from);
  void MergeFrom(const CmdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdRequest_Sync Sync;
  typedef CmdRequest_Set Set;
  typedef CmdRequest_Get Get;
  typedef CmdRequest_Del Del;
  typedef CmdRequest_Info Info;
  typedef CmdRequest_Mget Mget;

  // accessors -------------------------------------------------------

  // required .client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::Type type() const;
  inline void set_type(::client::Type value);

  // optional .client.CmdRequest.Sync sync = 2;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 2;
  inline const ::client::CmdRequest_Sync& sync() const;
  inline ::client::CmdRequest_Sync* mutable_sync();
  inline ::client::CmdRequest_Sync* release_sync();
  inline void set_allocated_sync(::client::CmdRequest_Sync* sync);

  // optional .client.CmdRequest.Set set = 3;
  inline bool has_set() const;
  inline void clear_set();
  static const int kSetFieldNumber = 3;
  inline const ::client::CmdRequest_Set& set() const;
  inline ::client::CmdRequest_Set* mutable_set();
  inline ::client::CmdRequest_Set* release_set();
  inline void set_allocated_set(::client::CmdRequest_Set* set);

  // optional .client.CmdRequest.Get get = 4;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 4;
  inline const ::client::CmdRequest_Get& get() const;
  inline ::client::CmdRequest_Get* mutable_get();
  inline ::client::CmdRequest_Get* release_get();
  inline void set_allocated_get(::client::CmdRequest_Get* get);

  // optional .client.CmdRequest.Del del = 5;
  inline bool has_del() const;
  inline void clear_del();
  static const int kDelFieldNumber = 5;
  inline const ::client::CmdRequest_Del& del() const;
  inline ::client::CmdRequest_Del* mutable_del();
  inline ::client::CmdRequest_Del* release_del();
  inline void set_allocated_del(::client::CmdRequest_Del* del);

  // optional .client.CmdRequest.Info info = 6;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::client::CmdRequest_Info& info() const;
  inline ::client::CmdRequest_Info* mutable_info();
  inline ::client::CmdRequest_Info* release_info();
  inline void set_allocated_info(::client::CmdRequest_Info* info);

  // optional .client.CmdRequest.Mget mget = 7;
  inline bool has_mget() const;
  inline void clear_mget();
  static const int kMgetFieldNumber = 7;
  inline const ::client::CmdRequest_Mget& mget() const;
  inline ::client::CmdRequest_Mget* mutable_mget();
  inline ::client::CmdRequest_Mget* release_mget();
  inline void set_allocated_mget(::client::CmdRequest_Mget* mget);

  // @@protoc_insertion_point(class_scope:client.CmdRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sync();
  inline void clear_has_sync();
  inline void set_has_set();
  inline void clear_has_set();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_del();
  inline void clear_has_del();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_mget();
  inline void clear_has_mget();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::client::CmdRequest_Sync* sync_;
  ::client::CmdRequest_Set* set_;
  ::client::CmdRequest_Get* get_;
  ::client::CmdRequest_Del* del_;
  ::client::CmdRequest_Info* info_;
  ::client::CmdRequest_Mget* mget_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdRequest* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Sync : public ::google::protobuf::Message {
 public:
  CmdResponse_Sync();
  virtual ~CmdResponse_Sync();

  CmdResponse_Sync(const CmdResponse_Sync& from);

  inline CmdResponse_Sync& operator=(const CmdResponse_Sync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Sync& default_instance();

  void Swap(CmdResponse_Sync* other);

  // implements Message ----------------------------------------------

  CmdResponse_Sync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Sync& from);
  void MergeFrom(const CmdResponse_Sync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required .client.SyncOffset sync_offset = 2;
  inline bool has_sync_offset() const;
  inline void clear_sync_offset();
  static const int kSyncOffsetFieldNumber = 2;
  inline const ::client::SyncOffset& sync_offset() const;
  inline ::client::SyncOffset* mutable_sync_offset();
  inline ::client::SyncOffset* release_sync_offset();
  inline void set_allocated_sync_offset(::client::SyncOffset* sync_offset);

  // @@protoc_insertion_point(class_scope:client.CmdResponse.Sync)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_sync_offset();
  inline void clear_has_sync_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::client::SyncOffset* sync_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_Sync* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Get : public ::google::protobuf::Message {
 public:
  CmdResponse_Get();
  virtual ~CmdResponse_Get();

  CmdResponse_Get(const CmdResponse_Get& from);

  inline CmdResponse_Get& operator=(const CmdResponse_Get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Get& default_instance();

  void Swap(CmdResponse_Get* other);

  // implements Message ----------------------------------------------

  CmdResponse_Get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Get& from);
  void MergeFrom(const CmdResponse_Get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:client.CmdResponse.Get)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_Get* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_InfoStats : public ::google::protobuf::Message {
 public:
  CmdResponse_InfoStats();
  virtual ~CmdResponse_InfoStats();

  CmdResponse_InfoStats(const CmdResponse_InfoStats& from);

  inline CmdResponse_InfoStats& operator=(const CmdResponse_InfoStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_InfoStats& default_instance();

  void Swap(CmdResponse_InfoStats* other);

  // implements Message ----------------------------------------------

  CmdResponse_InfoStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_InfoStats& from);
  void MergeFrom(const CmdResponse_InfoStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int64 total_querys = 2;
  inline bool has_total_querys() const;
  inline void clear_total_querys();
  static const int kTotalQuerysFieldNumber = 2;
  inline ::google::protobuf::int64 total_querys() const;
  inline void set_total_querys(::google::protobuf::int64 value);

  // required int32 qps = 3;
  inline bool has_qps() const;
  inline void clear_qps();
  static const int kQpsFieldNumber = 3;
  inline ::google::protobuf::int32 qps() const;
  inline void set_qps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:client.CmdResponse.InfoStats)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_total_querys();
  inline void clear_has_total_querys();
  inline void set_has_qps();
  inline void clear_has_qps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::int64 total_querys_;
  ::google::protobuf::int32 qps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_InfoStats* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_InfoCapacity : public ::google::protobuf::Message {
 public:
  CmdResponse_InfoCapacity();
  virtual ~CmdResponse_InfoCapacity();

  CmdResponse_InfoCapacity(const CmdResponse_InfoCapacity& from);

  inline CmdResponse_InfoCapacity& operator=(const CmdResponse_InfoCapacity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_InfoCapacity& default_instance();

  void Swap(CmdResponse_InfoCapacity* other);

  // implements Message ----------------------------------------------

  CmdResponse_InfoCapacity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_InfoCapacity& from);
  void MergeFrom(const CmdResponse_InfoCapacity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int64 used = 2;
  inline bool has_used() const;
  inline void clear_used();
  static const int kUsedFieldNumber = 2;
  inline ::google::protobuf::int64 used() const;
  inline void set_used(::google::protobuf::int64 value);

  // required int64 remain = 3;
  inline bool has_remain() const;
  inline void clear_remain();
  static const int kRemainFieldNumber = 3;
  inline ::google::protobuf::int64 remain() const;
  inline void set_remain(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client.CmdResponse.InfoCapacity)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_used();
  inline void clear_has_used();
  inline void set_has_remain();
  inline void clear_has_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::int64 used_;
  ::google::protobuf::int64 remain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_InfoCapacity* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_InfoPartition : public ::google::protobuf::Message {
 public:
  CmdResponse_InfoPartition();
  virtual ~CmdResponse_InfoPartition();

  CmdResponse_InfoPartition(const CmdResponse_InfoPartition& from);

  inline CmdResponse_InfoPartition& operator=(const CmdResponse_InfoPartition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_InfoPartition& default_instance();

  void Swap(CmdResponse_InfoPartition* other);

  // implements Message ----------------------------------------------

  CmdResponse_InfoPartition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_InfoPartition& from);
  void MergeFrom(const CmdResponse_InfoPartition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // repeated .client.SyncOffset sync_offset = 2;
  inline int sync_offset_size() const;
  inline void clear_sync_offset();
  static const int kSyncOffsetFieldNumber = 2;
  inline const ::client::SyncOffset& sync_offset(int index) const;
  inline ::client::SyncOffset* mutable_sync_offset(int index);
  inline ::client::SyncOffset* add_sync_offset();
  inline const ::google::protobuf::RepeatedPtrField< ::client::SyncOffset >&
      sync_offset() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::SyncOffset >*
      mutable_sync_offset();

  // @@protoc_insertion_point(class_scope:client.CmdResponse.InfoPartition)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::client::SyncOffset > sync_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_InfoPartition* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse_Mget : public ::google::protobuf::Message {
 public:
  CmdResponse_Mget();
  virtual ~CmdResponse_Mget();

  CmdResponse_Mget(const CmdResponse_Mget& from);

  inline CmdResponse_Mget& operator=(const CmdResponse_Mget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse_Mget& default_instance();

  void Swap(CmdResponse_Mget* other);

  // implements Message ----------------------------------------------

  CmdResponse_Mget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse_Mget& from);
  void MergeFrom(const CmdResponse_Mget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:client.CmdResponse.Mget)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse_Mget* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  CmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdResponse_Sync Sync;
  typedef CmdResponse_Get Get;
  typedef CmdResponse_InfoStats InfoStats;
  typedef CmdResponse_InfoCapacity InfoCapacity;
  typedef CmdResponse_InfoPartition InfoPartition;
  typedef CmdResponse_Mget Mget;

  // accessors -------------------------------------------------------

  // required .client.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::client::Type type() const;
  inline void set_type(::client::Type value);

  // required .client.StatusCode code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::client::StatusCode code() const;
  inline void set_code(::client::StatusCode value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .client.CmdResponse.Sync sync = 4;
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 4;
  inline const ::client::CmdResponse_Sync& sync() const;
  inline ::client::CmdResponse_Sync* mutable_sync();
  inline ::client::CmdResponse_Sync* release_sync();
  inline void set_allocated_sync(::client::CmdResponse_Sync* sync);

  // optional .client.CmdResponse.Get get = 5;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 5;
  inline const ::client::CmdResponse_Get& get() const;
  inline ::client::CmdResponse_Get* mutable_get();
  inline ::client::CmdResponse_Get* release_get();
  inline void set_allocated_get(::client::CmdResponse_Get* get);

  // optional .client.Node redirect = 6;
  inline bool has_redirect() const;
  inline void clear_redirect();
  static const int kRedirectFieldNumber = 6;
  inline const ::client::Node& redirect() const;
  inline ::client::Node* mutable_redirect();
  inline ::client::Node* release_redirect();
  inline void set_allocated_redirect(::client::Node* redirect);

  // repeated .client.CmdResponse.InfoStats info_stats = 7;
  inline int info_stats_size() const;
  inline void clear_info_stats();
  static const int kInfoStatsFieldNumber = 7;
  inline const ::client::CmdResponse_InfoStats& info_stats(int index) const;
  inline ::client::CmdResponse_InfoStats* mutable_info_stats(int index);
  inline ::client::CmdResponse_InfoStats* add_info_stats();
  inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoStats >&
      info_stats() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoStats >*
      mutable_info_stats();

  // repeated .client.CmdResponse.InfoCapacity info_capacity = 8;
  inline int info_capacity_size() const;
  inline void clear_info_capacity();
  static const int kInfoCapacityFieldNumber = 8;
  inline const ::client::CmdResponse_InfoCapacity& info_capacity(int index) const;
  inline ::client::CmdResponse_InfoCapacity* mutable_info_capacity(int index);
  inline ::client::CmdResponse_InfoCapacity* add_info_capacity();
  inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoCapacity >&
      info_capacity() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoCapacity >*
      mutable_info_capacity();

  // repeated .client.CmdResponse.InfoPartition info_partition = 9;
  inline int info_partition_size() const;
  inline void clear_info_partition();
  static const int kInfoPartitionFieldNumber = 9;
  inline const ::client::CmdResponse_InfoPartition& info_partition(int index) const;
  inline ::client::CmdResponse_InfoPartition* mutable_info_partition(int index);
  inline ::client::CmdResponse_InfoPartition* add_info_partition();
  inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoPartition >&
      info_partition() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoPartition >*
      mutable_info_partition();

  // repeated .client.CmdResponse.Mget mget = 10;
  inline int mget_size() const;
  inline void clear_mget();
  static const int kMgetFieldNumber = 10;
  inline const ::client::CmdResponse_Mget& mget(int index) const;
  inline ::client::CmdResponse_Mget* mutable_mget(int index);
  inline ::client::CmdResponse_Mget* add_mget();
  inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_Mget >&
      mget() const;
  inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_Mget >*
      mutable_mget();

  // @@protoc_insertion_point(class_scope:client.CmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_sync();
  inline void clear_has_sync();
  inline void set_has_get();
  inline void clear_has_get();
  inline void set_has_redirect();
  inline void clear_has_redirect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::std::string* msg_;
  ::client::CmdResponse_Sync* sync_;
  ::client::CmdResponse_Get* get_;
  ::client::Node* redirect_;
  ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoStats > info_stats_;
  ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoCapacity > info_capacity_;
  ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoPartition > info_partition_;
  ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_Mget > mget_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// -------------------------------------------------------------------

class BinlogSkip : public ::google::protobuf::Message {
 public:
  BinlogSkip();
  virtual ~BinlogSkip();

  BinlogSkip(const BinlogSkip& from);

  inline BinlogSkip& operator=(const BinlogSkip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinlogSkip& default_instance();

  void Swap(BinlogSkip* other);

  // implements Message ----------------------------------------------

  BinlogSkip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinlogSkip& from);
  void MergeFrom(const BinlogSkip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int32 partition_id = 2;
  inline bool has_partition_id() const;
  inline void clear_partition_id();
  static const int kPartitionIdFieldNumber = 2;
  inline ::google::protobuf::int32 partition_id() const;
  inline void set_partition_id(::google::protobuf::int32 value);

  // required int64 gap = 3;
  inline bool has_gap() const;
  inline void clear_gap();
  static const int kGapFieldNumber = 3;
  inline ::google::protobuf::int64 gap() const;
  inline void set_gap(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:client.BinlogSkip)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_partition_id();
  inline void clear_has_partition_id();
  inline void set_has_gap();
  inline void clear_has_gap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::int64 gap_;
  ::google::protobuf::int32 partition_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static BinlogSkip* default_instance_;
};
// -------------------------------------------------------------------

class SyncRequest : public ::google::protobuf::Message {
 public:
  SyncRequest();
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRequest& default_instance();

  void Swap(SyncRequest* other);

  // implements Message ----------------------------------------------

  SyncRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .client.SyncType sync_type = 1;
  inline bool has_sync_type() const;
  inline void clear_sync_type();
  static const int kSyncTypeFieldNumber = 1;
  inline ::client::SyncType sync_type() const;
  inline void set_sync_type(::client::SyncType value);

  // required int64 epoch = 2;
  inline bool has_epoch() const;
  inline void clear_epoch();
  static const int kEpochFieldNumber = 2;
  inline ::google::protobuf::int64 epoch() const;
  inline void set_epoch(::google::protobuf::int64 value);

  // required .client.Node from = 3;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 3;
  inline const ::client::Node& from() const;
  inline ::client::Node* mutable_from();
  inline ::client::Node* release_from();
  inline void set_allocated_from(::client::Node* from);

  // required .client.SyncOffset sync_offset = 4;
  inline bool has_sync_offset() const;
  inline void clear_sync_offset();
  static const int kSyncOffsetFieldNumber = 4;
  inline const ::client::SyncOffset& sync_offset() const;
  inline ::client::SyncOffset* mutable_sync_offset();
  inline ::client::SyncOffset* release_sync_offset();
  inline void set_allocated_sync_offset(::client::SyncOffset* sync_offset);

  // optional .client.CmdRequest request = 5;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 5;
  inline const ::client::CmdRequest& request() const;
  inline ::client::CmdRequest* mutable_request();
  inline ::client::CmdRequest* release_request();
  inline void set_allocated_request(::client::CmdRequest* request);

  // optional .client.BinlogSkip binlog_skip = 6;
  inline bool has_binlog_skip() const;
  inline void clear_binlog_skip();
  static const int kBinlogSkipFieldNumber = 6;
  inline const ::client::BinlogSkip& binlog_skip() const;
  inline ::client::BinlogSkip* mutable_binlog_skip();
  inline ::client::BinlogSkip* release_binlog_skip();
  inline void set_allocated_binlog_skip(::client::BinlogSkip* binlog_skip);

  // @@protoc_insertion_point(class_scope:client.SyncRequest)
 private:
  inline void set_has_sync_type();
  inline void clear_has_sync_type();
  inline void set_has_epoch();
  inline void clear_has_epoch();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_sync_offset();
  inline void clear_has_sync_offset();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_binlog_skip();
  inline void clear_has_binlog_skip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 epoch_;
  ::client::Node* from_;
  ::client::SyncOffset* sync_offset_;
  ::client::CmdRequest* request_;
  ::client::BinlogSkip* binlog_skip_;
  int sync_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static SyncRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required string ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// SyncOffset

// required int32 filenum = 1;
inline bool SyncOffset::has_filenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncOffset::set_has_filenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncOffset::clear_has_filenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncOffset::clear_filenum() {
  filenum_ = 0;
  clear_has_filenum();
}
inline ::google::protobuf::int32 SyncOffset::filenum() const {
  return filenum_;
}
inline void SyncOffset::set_filenum(::google::protobuf::int32 value) {
  set_has_filenum();
  filenum_ = value;
}

// required int64 offset = 2;
inline bool SyncOffset::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncOffset::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncOffset::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncOffset::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 SyncOffset::offset() const {
  return offset_;
}
inline void SyncOffset::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// optional int32 partition = 3;
inline bool SyncOffset::has_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncOffset::set_has_partition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncOffset::clear_has_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncOffset::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 SyncOffset::partition() const {
  return partition_;
}
inline void SyncOffset::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
}

// -------------------------------------------------------------------

// CmdRequest_Sync

// required .client.Node node = 1;
inline bool CmdRequest_Sync::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Sync::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Sync::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Sync::clear_node() {
  if (node_ != NULL) node_->::client::Node::Clear();
  clear_has_node();
}
inline const ::client::Node& CmdRequest_Sync::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::client::Node* CmdRequest_Sync::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::client::Node;
  return node_;
}
inline ::client::Node* CmdRequest_Sync::release_node() {
  clear_has_node();
  ::client::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void CmdRequest_Sync::set_allocated_node(::client::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// required string table_name = 2;
inline bool CmdRequest_Sync::has_table_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Sync::set_has_table_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Sync::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Sync::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Sync::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Sync::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Sync::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Sync::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Sync::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Sync::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Sync::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .client.SyncOffset sync_offset = 3;
inline bool CmdRequest_Sync::has_sync_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Sync::set_has_sync_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Sync::clear_has_sync_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Sync::clear_sync_offset() {
  if (sync_offset_ != NULL) sync_offset_->::client::SyncOffset::Clear();
  clear_has_sync_offset();
}
inline const ::client::SyncOffset& CmdRequest_Sync::sync_offset() const {
  return sync_offset_ != NULL ? *sync_offset_ : *default_instance_->sync_offset_;
}
inline ::client::SyncOffset* CmdRequest_Sync::mutable_sync_offset() {
  set_has_sync_offset();
  if (sync_offset_ == NULL) sync_offset_ = new ::client::SyncOffset;
  return sync_offset_;
}
inline ::client::SyncOffset* CmdRequest_Sync::release_sync_offset() {
  clear_has_sync_offset();
  ::client::SyncOffset* temp = sync_offset_;
  sync_offset_ = NULL;
  return temp;
}
inline void CmdRequest_Sync::set_allocated_sync_offset(::client::SyncOffset* sync_offset) {
  delete sync_offset_;
  sync_offset_ = sync_offset;
  if (sync_offset) {
    set_has_sync_offset();
  } else {
    clear_has_sync_offset();
  }
}

// -------------------------------------------------------------------

// CmdRequest_Set

// required string table_name = 1;
inline bool CmdRequest_Set::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Set::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Set::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Set::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Set::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Set::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Set::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Set::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Set::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool CmdRequest_Set::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Set::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Set::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Set::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Set::key() const {
  return *key_;
}
inline void CmdRequest_Set::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Set::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Set::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Set::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 3;
inline bool CmdRequest_Set::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Set::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Set::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Set::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdRequest_Set::value() const {
  return *value_;
}
inline void CmdRequest_Set::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Set::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdRequest_Set::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdRequest_Set::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 4;
inline bool CmdRequest_Set::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest_Set::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest_Set::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest_Set::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CmdRequest_Set::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Set::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Set::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Set::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Set::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CmdRequest_Set::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Set::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Get

// required string table_name = 1;
inline bool CmdRequest_Get::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Get::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Get::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Get::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Get::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Get::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Get::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Get::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Get::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Get::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool CmdRequest_Get::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Get::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Get::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Get::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Get::key() const {
  return *key_;
}
inline void CmdRequest_Get::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Get::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Get::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Get::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Get::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 3;
inline bool CmdRequest_Get::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Get::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Get::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Get::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CmdRequest_Get::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Get::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Get::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Get::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Get::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CmdRequest_Get::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Get::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Del

// required string table_name = 1;
inline bool CmdRequest_Del::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Del::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Del::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Del::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Del::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Del::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Del::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Del::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Del::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Del::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Del::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool CmdRequest_Del::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest_Del::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest_Del::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest_Del::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdRequest_Del::key() const {
  return *key_;
}
inline void CmdRequest_Del::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Del::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdRequest_Del::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Del::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdRequest_Del::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Del::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 3;
inline bool CmdRequest_Del::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest_Del::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest_Del::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest_Del::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& CmdRequest_Del::uuid() const {
  return *uuid_;
}
inline void CmdRequest_Del::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Del::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void CmdRequest_Del::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Del::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* CmdRequest_Del::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Del::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Info

// optional string table_name = 1;
inline bool CmdRequest_Info::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Info::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Info::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Info::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Info::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Info::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Info::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Info::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Info::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Info::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Info::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdRequest_Mget

// required string table_name = 1;
inline bool CmdRequest_Mget::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest_Mget::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest_Mget::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest_Mget::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdRequest_Mget::table_name() const {
  return *table_name_;
}
inline void CmdRequest_Mget::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Mget::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdRequest_Mget::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Mget::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdRequest_Mget::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdRequest_Mget::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string keys = 2;
inline int CmdRequest_Mget::keys_size() const {
  return keys_.size();
}
inline void CmdRequest_Mget::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& CmdRequest_Mget::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* CmdRequest_Mget::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void CmdRequest_Mget::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void CmdRequest_Mget::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void CmdRequest_Mget::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdRequest_Mget::add_keys() {
  return keys_.Add();
}
inline void CmdRequest_Mget::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void CmdRequest_Mget::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void CmdRequest_Mget::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CmdRequest_Mget::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CmdRequest_Mget::mutable_keys() {
  return &keys_;
}

// -------------------------------------------------------------------

// CmdRequest

// required .client.Type type = 1;
inline bool CmdRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::Type CmdRequest::type() const {
  return static_cast< ::client::Type >(type_);
}
inline void CmdRequest::set_type(::client::Type value) {
  assert(::client::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .client.CmdRequest.Sync sync = 2;
inline bool CmdRequest::has_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdRequest::set_has_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdRequest::clear_has_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdRequest::clear_sync() {
  if (sync_ != NULL) sync_->::client::CmdRequest_Sync::Clear();
  clear_has_sync();
}
inline const ::client::CmdRequest_Sync& CmdRequest::sync() const {
  return sync_ != NULL ? *sync_ : *default_instance_->sync_;
}
inline ::client::CmdRequest_Sync* CmdRequest::mutable_sync() {
  set_has_sync();
  if (sync_ == NULL) sync_ = new ::client::CmdRequest_Sync;
  return sync_;
}
inline ::client::CmdRequest_Sync* CmdRequest::release_sync() {
  clear_has_sync();
  ::client::CmdRequest_Sync* temp = sync_;
  sync_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_sync(::client::CmdRequest_Sync* sync) {
  delete sync_;
  sync_ = sync;
  if (sync) {
    set_has_sync();
  } else {
    clear_has_sync();
  }
}

// optional .client.CmdRequest.Set set = 3;
inline bool CmdRequest::has_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdRequest::set_has_set() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdRequest::clear_has_set() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdRequest::clear_set() {
  if (set_ != NULL) set_->::client::CmdRequest_Set::Clear();
  clear_has_set();
}
inline const ::client::CmdRequest_Set& CmdRequest::set() const {
  return set_ != NULL ? *set_ : *default_instance_->set_;
}
inline ::client::CmdRequest_Set* CmdRequest::mutable_set() {
  set_has_set();
  if (set_ == NULL) set_ = new ::client::CmdRequest_Set;
  return set_;
}
inline ::client::CmdRequest_Set* CmdRequest::release_set() {
  clear_has_set();
  ::client::CmdRequest_Set* temp = set_;
  set_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_set(::client::CmdRequest_Set* set) {
  delete set_;
  set_ = set;
  if (set) {
    set_has_set();
  } else {
    clear_has_set();
  }
}

// optional .client.CmdRequest.Get get = 4;
inline bool CmdRequest::has_get() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdRequest::set_has_get() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdRequest::clear_has_get() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdRequest::clear_get() {
  if (get_ != NULL) get_->::client::CmdRequest_Get::Clear();
  clear_has_get();
}
inline const ::client::CmdRequest_Get& CmdRequest::get() const {
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::client::CmdRequest_Get* CmdRequest::mutable_get() {
  set_has_get();
  if (get_ == NULL) get_ = new ::client::CmdRequest_Get;
  return get_;
}
inline ::client::CmdRequest_Get* CmdRequest::release_get() {
  clear_has_get();
  ::client::CmdRequest_Get* temp = get_;
  get_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_get(::client::CmdRequest_Get* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
}

// optional .client.CmdRequest.Del del = 5;
inline bool CmdRequest::has_del() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdRequest::set_has_del() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdRequest::clear_has_del() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdRequest::clear_del() {
  if (del_ != NULL) del_->::client::CmdRequest_Del::Clear();
  clear_has_del();
}
inline const ::client::CmdRequest_Del& CmdRequest::del() const {
  return del_ != NULL ? *del_ : *default_instance_->del_;
}
inline ::client::CmdRequest_Del* CmdRequest::mutable_del() {
  set_has_del();
  if (del_ == NULL) del_ = new ::client::CmdRequest_Del;
  return del_;
}
inline ::client::CmdRequest_Del* CmdRequest::release_del() {
  clear_has_del();
  ::client::CmdRequest_Del* temp = del_;
  del_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_del(::client::CmdRequest_Del* del) {
  delete del_;
  del_ = del;
  if (del) {
    set_has_del();
  } else {
    clear_has_del();
  }
}

// optional .client.CmdRequest.Info info = 6;
inline bool CmdRequest::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdRequest::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdRequest::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdRequest::clear_info() {
  if (info_ != NULL) info_->::client::CmdRequest_Info::Clear();
  clear_has_info();
}
inline const ::client::CmdRequest_Info& CmdRequest::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::client::CmdRequest_Info* CmdRequest::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::client::CmdRequest_Info;
  return info_;
}
inline ::client::CmdRequest_Info* CmdRequest::release_info() {
  clear_has_info();
  ::client::CmdRequest_Info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_info(::client::CmdRequest_Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional .client.CmdRequest.Mget mget = 7;
inline bool CmdRequest::has_mget() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CmdRequest::set_has_mget() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CmdRequest::clear_has_mget() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CmdRequest::clear_mget() {
  if (mget_ != NULL) mget_->::client::CmdRequest_Mget::Clear();
  clear_has_mget();
}
inline const ::client::CmdRequest_Mget& CmdRequest::mget() const {
  return mget_ != NULL ? *mget_ : *default_instance_->mget_;
}
inline ::client::CmdRequest_Mget* CmdRequest::mutable_mget() {
  set_has_mget();
  if (mget_ == NULL) mget_ = new ::client::CmdRequest_Mget;
  return mget_;
}
inline ::client::CmdRequest_Mget* CmdRequest::release_mget() {
  clear_has_mget();
  ::client::CmdRequest_Mget* temp = mget_;
  mget_ = NULL;
  return temp;
}
inline void CmdRequest::set_allocated_mget(::client::CmdRequest_Mget* mget) {
  delete mget_;
  mget_ = mget;
  if (mget) {
    set_has_mget();
  } else {
    clear_has_mget();
  }
}

// -------------------------------------------------------------------

// CmdResponse_Sync

// required string table_name = 1;
inline bool CmdResponse_Sync::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_Sync::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_Sync::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_Sync::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdResponse_Sync::table_name() const {
  return *table_name_;
}
inline void CmdResponse_Sync::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_Sync::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_Sync::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Sync::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdResponse_Sync::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_Sync::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .client.SyncOffset sync_offset = 2;
inline bool CmdResponse_Sync::has_sync_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_Sync::set_has_sync_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_Sync::clear_has_sync_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_Sync::clear_sync_offset() {
  if (sync_offset_ != NULL) sync_offset_->::client::SyncOffset::Clear();
  clear_has_sync_offset();
}
inline const ::client::SyncOffset& CmdResponse_Sync::sync_offset() const {
  return sync_offset_ != NULL ? *sync_offset_ : *default_instance_->sync_offset_;
}
inline ::client::SyncOffset* CmdResponse_Sync::mutable_sync_offset() {
  set_has_sync_offset();
  if (sync_offset_ == NULL) sync_offset_ = new ::client::SyncOffset;
  return sync_offset_;
}
inline ::client::SyncOffset* CmdResponse_Sync::release_sync_offset() {
  clear_has_sync_offset();
  ::client::SyncOffset* temp = sync_offset_;
  sync_offset_ = NULL;
  return temp;
}
inline void CmdResponse_Sync::set_allocated_sync_offset(::client::SyncOffset* sync_offset) {
  delete sync_offset_;
  sync_offset_ = sync_offset;
  if (sync_offset) {
    set_has_sync_offset();
  } else {
    clear_has_sync_offset();
  }
}

// -------------------------------------------------------------------

// CmdResponse_Get

// optional bytes value = 1;
inline bool CmdResponse_Get::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_Get::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_Get::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_Get::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdResponse_Get::value() const {
  return *value_;
}
inline void CmdResponse_Get::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Get::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Get::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Get::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdResponse_Get::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_Get::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdResponse_InfoStats

// required string table_name = 1;
inline bool CmdResponse_InfoStats::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_InfoStats::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_InfoStats::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_InfoStats::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdResponse_InfoStats::table_name() const {
  return *table_name_;
}
inline void CmdResponse_InfoStats::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_InfoStats::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_InfoStats::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_InfoStats::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdResponse_InfoStats::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_InfoStats::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 total_querys = 2;
inline bool CmdResponse_InfoStats::has_total_querys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_InfoStats::set_has_total_querys() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_InfoStats::clear_has_total_querys() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_InfoStats::clear_total_querys() {
  total_querys_ = GOOGLE_LONGLONG(0);
  clear_has_total_querys();
}
inline ::google::protobuf::int64 CmdResponse_InfoStats::total_querys() const {
  return total_querys_;
}
inline void CmdResponse_InfoStats::set_total_querys(::google::protobuf::int64 value) {
  set_has_total_querys();
  total_querys_ = value;
}

// required int32 qps = 3;
inline bool CmdResponse_InfoStats::has_qps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_InfoStats::set_has_qps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_InfoStats::clear_has_qps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_InfoStats::clear_qps() {
  qps_ = 0;
  clear_has_qps();
}
inline ::google::protobuf::int32 CmdResponse_InfoStats::qps() const {
  return qps_;
}
inline void CmdResponse_InfoStats::set_qps(::google::protobuf::int32 value) {
  set_has_qps();
  qps_ = value;
}

// -------------------------------------------------------------------

// CmdResponse_InfoCapacity

// required string table_name = 1;
inline bool CmdResponse_InfoCapacity::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_InfoCapacity::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_InfoCapacity::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_InfoCapacity::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdResponse_InfoCapacity::table_name() const {
  return *table_name_;
}
inline void CmdResponse_InfoCapacity::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_InfoCapacity::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_InfoCapacity::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_InfoCapacity::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdResponse_InfoCapacity::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_InfoCapacity::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 used = 2;
inline bool CmdResponse_InfoCapacity::has_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_InfoCapacity::set_has_used() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_InfoCapacity::clear_has_used() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_InfoCapacity::clear_used() {
  used_ = GOOGLE_LONGLONG(0);
  clear_has_used();
}
inline ::google::protobuf::int64 CmdResponse_InfoCapacity::used() const {
  return used_;
}
inline void CmdResponse_InfoCapacity::set_used(::google::protobuf::int64 value) {
  set_has_used();
  used_ = value;
}

// required int64 remain = 3;
inline bool CmdResponse_InfoCapacity::has_remain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse_InfoCapacity::set_has_remain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse_InfoCapacity::clear_has_remain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse_InfoCapacity::clear_remain() {
  remain_ = GOOGLE_LONGLONG(0);
  clear_has_remain();
}
inline ::google::protobuf::int64 CmdResponse_InfoCapacity::remain() const {
  return remain_;
}
inline void CmdResponse_InfoCapacity::set_remain(::google::protobuf::int64 value) {
  set_has_remain();
  remain_ = value;
}

// -------------------------------------------------------------------

// CmdResponse_InfoPartition

// required string table_name = 1;
inline bool CmdResponse_InfoPartition::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_InfoPartition::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_InfoPartition::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_InfoPartition::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CmdResponse_InfoPartition::table_name() const {
  return *table_name_;
}
inline void CmdResponse_InfoPartition::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_InfoPartition::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CmdResponse_InfoPartition::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_InfoPartition::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CmdResponse_InfoPartition::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_InfoPartition::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .client.SyncOffset sync_offset = 2;
inline int CmdResponse_InfoPartition::sync_offset_size() const {
  return sync_offset_.size();
}
inline void CmdResponse_InfoPartition::clear_sync_offset() {
  sync_offset_.Clear();
}
inline const ::client::SyncOffset& CmdResponse_InfoPartition::sync_offset(int index) const {
  return sync_offset_.Get(index);
}
inline ::client::SyncOffset* CmdResponse_InfoPartition::mutable_sync_offset(int index) {
  return sync_offset_.Mutable(index);
}
inline ::client::SyncOffset* CmdResponse_InfoPartition::add_sync_offset() {
  return sync_offset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::SyncOffset >&
CmdResponse_InfoPartition::sync_offset() const {
  return sync_offset_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::SyncOffset >*
CmdResponse_InfoPartition::mutable_sync_offset() {
  return &sync_offset_;
}

// -------------------------------------------------------------------

// CmdResponse_Mget

// required string key = 1;
inline bool CmdResponse_Mget::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse_Mget::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse_Mget::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse_Mget::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& CmdResponse_Mget::key() const {
  return *key_;
}
inline void CmdResponse_Mget::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdResponse_Mget::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CmdResponse_Mget::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Mget::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* CmdResponse_Mget::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_Mget::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool CmdResponse_Mget::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse_Mget::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse_Mget::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse_Mget::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CmdResponse_Mget::value() const {
  return *value_;
}
inline void CmdResponse_Mget::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Mget::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CmdResponse_Mget::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse_Mget::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* CmdResponse_Mget::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse_Mget::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CmdResponse

// required .client.Type type = 1;
inline bool CmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CmdResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::client::Type CmdResponse::type() const {
  return static_cast< ::client::Type >(type_);
}
inline void CmdResponse::set_type(::client::Type value) {
  assert(::client::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .client.StatusCode code = 2;
inline bool CmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::client::StatusCode CmdResponse::code() const {
  return static_cast< ::client::StatusCode >(code_);
}
inline void CmdResponse::set_code(::client::StatusCode value) {
  assert(::client::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string msg = 3;
inline bool CmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CmdResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& CmdResponse::msg() const {
  return *msg_;
}
inline void CmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void CmdResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CmdResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* CmdResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .client.CmdResponse.Sync sync = 4;
inline bool CmdResponse::has_sync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CmdResponse::set_has_sync() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CmdResponse::clear_has_sync() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CmdResponse::clear_sync() {
  if (sync_ != NULL) sync_->::client::CmdResponse_Sync::Clear();
  clear_has_sync();
}
inline const ::client::CmdResponse_Sync& CmdResponse::sync() const {
  return sync_ != NULL ? *sync_ : *default_instance_->sync_;
}
inline ::client::CmdResponse_Sync* CmdResponse::mutable_sync() {
  set_has_sync();
  if (sync_ == NULL) sync_ = new ::client::CmdResponse_Sync;
  return sync_;
}
inline ::client::CmdResponse_Sync* CmdResponse::release_sync() {
  clear_has_sync();
  ::client::CmdResponse_Sync* temp = sync_;
  sync_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_sync(::client::CmdResponse_Sync* sync) {
  delete sync_;
  sync_ = sync;
  if (sync) {
    set_has_sync();
  } else {
    clear_has_sync();
  }
}

// optional .client.CmdResponse.Get get = 5;
inline bool CmdResponse::has_get() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CmdResponse::set_has_get() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CmdResponse::clear_has_get() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CmdResponse::clear_get() {
  if (get_ != NULL) get_->::client::CmdResponse_Get::Clear();
  clear_has_get();
}
inline const ::client::CmdResponse_Get& CmdResponse::get() const {
  return get_ != NULL ? *get_ : *default_instance_->get_;
}
inline ::client::CmdResponse_Get* CmdResponse::mutable_get() {
  set_has_get();
  if (get_ == NULL) get_ = new ::client::CmdResponse_Get;
  return get_;
}
inline ::client::CmdResponse_Get* CmdResponse::release_get() {
  clear_has_get();
  ::client::CmdResponse_Get* temp = get_;
  get_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_get(::client::CmdResponse_Get* get) {
  delete get_;
  get_ = get;
  if (get) {
    set_has_get();
  } else {
    clear_has_get();
  }
}

// optional .client.Node redirect = 6;
inline bool CmdResponse::has_redirect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CmdResponse::set_has_redirect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CmdResponse::clear_has_redirect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CmdResponse::clear_redirect() {
  if (redirect_ != NULL) redirect_->::client::Node::Clear();
  clear_has_redirect();
}
inline const ::client::Node& CmdResponse::redirect() const {
  return redirect_ != NULL ? *redirect_ : *default_instance_->redirect_;
}
inline ::client::Node* CmdResponse::mutable_redirect() {
  set_has_redirect();
  if (redirect_ == NULL) redirect_ = new ::client::Node;
  return redirect_;
}
inline ::client::Node* CmdResponse::release_redirect() {
  clear_has_redirect();
  ::client::Node* temp = redirect_;
  redirect_ = NULL;
  return temp;
}
inline void CmdResponse::set_allocated_redirect(::client::Node* redirect) {
  delete redirect_;
  redirect_ = redirect;
  if (redirect) {
    set_has_redirect();
  } else {
    clear_has_redirect();
  }
}

// repeated .client.CmdResponse.InfoStats info_stats = 7;
inline int CmdResponse::info_stats_size() const {
  return info_stats_.size();
}
inline void CmdResponse::clear_info_stats() {
  info_stats_.Clear();
}
inline const ::client::CmdResponse_InfoStats& CmdResponse::info_stats(int index) const {
  return info_stats_.Get(index);
}
inline ::client::CmdResponse_InfoStats* CmdResponse::mutable_info_stats(int index) {
  return info_stats_.Mutable(index);
}
inline ::client::CmdResponse_InfoStats* CmdResponse::add_info_stats() {
  return info_stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoStats >&
CmdResponse::info_stats() const {
  return info_stats_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoStats >*
CmdResponse::mutable_info_stats() {
  return &info_stats_;
}

// repeated .client.CmdResponse.InfoCapacity info_capacity = 8;
inline int CmdResponse::info_capacity_size() const {
  return info_capacity_.size();
}
inline void CmdResponse::clear_info_capacity() {
  info_capacity_.Clear();
}
inline const ::client::CmdResponse_InfoCapacity& CmdResponse::info_capacity(int index) const {
  return info_capacity_.Get(index);
}
inline ::client::CmdResponse_InfoCapacity* CmdResponse::mutable_info_capacity(int index) {
  return info_capacity_.Mutable(index);
}
inline ::client::CmdResponse_InfoCapacity* CmdResponse::add_info_capacity() {
  return info_capacity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoCapacity >&
CmdResponse::info_capacity() const {
  return info_capacity_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoCapacity >*
CmdResponse::mutable_info_capacity() {
  return &info_capacity_;
}

// repeated .client.CmdResponse.InfoPartition info_partition = 9;
inline int CmdResponse::info_partition_size() const {
  return info_partition_.size();
}
inline void CmdResponse::clear_info_partition() {
  info_partition_.Clear();
}
inline const ::client::CmdResponse_InfoPartition& CmdResponse::info_partition(int index) const {
  return info_partition_.Get(index);
}
inline ::client::CmdResponse_InfoPartition* CmdResponse::mutable_info_partition(int index) {
  return info_partition_.Mutable(index);
}
inline ::client::CmdResponse_InfoPartition* CmdResponse::add_info_partition() {
  return info_partition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoPartition >&
CmdResponse::info_partition() const {
  return info_partition_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_InfoPartition >*
CmdResponse::mutable_info_partition() {
  return &info_partition_;
}

// repeated .client.CmdResponse.Mget mget = 10;
inline int CmdResponse::mget_size() const {
  return mget_.size();
}
inline void CmdResponse::clear_mget() {
  mget_.Clear();
}
inline const ::client::CmdResponse_Mget& CmdResponse::mget(int index) const {
  return mget_.Get(index);
}
inline ::client::CmdResponse_Mget* CmdResponse::mutable_mget(int index) {
  return mget_.Mutable(index);
}
inline ::client::CmdResponse_Mget* CmdResponse::add_mget() {
  return mget_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_Mget >&
CmdResponse::mget() const {
  return mget_;
}
inline ::google::protobuf::RepeatedPtrField< ::client::CmdResponse_Mget >*
CmdResponse::mutable_mget() {
  return &mget_;
}

// -------------------------------------------------------------------

// BinlogSkip

// required string table_name = 1;
inline bool BinlogSkip::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinlogSkip::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinlogSkip::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinlogSkip::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& BinlogSkip::table_name() const {
  return *table_name_;
}
inline void BinlogSkip::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void BinlogSkip::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void BinlogSkip::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BinlogSkip::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* BinlogSkip::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BinlogSkip::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 partition_id = 2;
inline bool BinlogSkip::has_partition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinlogSkip::set_has_partition_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BinlogSkip::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BinlogSkip::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
inline ::google::protobuf::int32 BinlogSkip::partition_id() const {
  return partition_id_;
}
inline void BinlogSkip::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
}

// required int64 gap = 3;
inline bool BinlogSkip::has_gap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinlogSkip::set_has_gap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BinlogSkip::clear_has_gap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BinlogSkip::clear_gap() {
  gap_ = GOOGLE_LONGLONG(0);
  clear_has_gap();
}
inline ::google::protobuf::int64 BinlogSkip::gap() const {
  return gap_;
}
inline void BinlogSkip::set_gap(::google::protobuf::int64 value) {
  set_has_gap();
  gap_ = value;
}

// -------------------------------------------------------------------

// SyncRequest

// required .client.SyncType sync_type = 1;
inline bool SyncRequest::has_sync_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncRequest::set_has_sync_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncRequest::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncRequest::clear_sync_type() {
  sync_type_ = 0;
  clear_has_sync_type();
}
inline ::client::SyncType SyncRequest::sync_type() const {
  return static_cast< ::client::SyncType >(sync_type_);
}
inline void SyncRequest::set_sync_type(::client::SyncType value) {
  assert(::client::SyncType_IsValid(value));
  set_has_sync_type();
  sync_type_ = value;
}

// required int64 epoch = 2;
inline bool SyncRequest::has_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncRequest::set_has_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncRequest::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncRequest::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
  clear_has_epoch();
}
inline ::google::protobuf::int64 SyncRequest::epoch() const {
  return epoch_;
}
inline void SyncRequest::set_epoch(::google::protobuf::int64 value) {
  set_has_epoch();
  epoch_ = value;
}

// required .client.Node from = 3;
inline bool SyncRequest::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncRequest::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncRequest::clear_from() {
  if (from_ != NULL) from_->::client::Node::Clear();
  clear_has_from();
}
inline const ::client::Node& SyncRequest::from() const {
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::client::Node* SyncRequest::mutable_from() {
  set_has_from();
  if (from_ == NULL) from_ = new ::client::Node;
  return from_;
}
inline ::client::Node* SyncRequest::release_from() {
  clear_has_from();
  ::client::Node* temp = from_;
  from_ = NULL;
  return temp;
}
inline void SyncRequest::set_allocated_from(::client::Node* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
}

// required .client.SyncOffset sync_offset = 4;
inline bool SyncRequest::has_sync_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncRequest::set_has_sync_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncRequest::clear_has_sync_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncRequest::clear_sync_offset() {
  if (sync_offset_ != NULL) sync_offset_->::client::SyncOffset::Clear();
  clear_has_sync_offset();
}
inline const ::client::SyncOffset& SyncRequest::sync_offset() const {
  return sync_offset_ != NULL ? *sync_offset_ : *default_instance_->sync_offset_;
}
inline ::client::SyncOffset* SyncRequest::mutable_sync_offset() {
  set_has_sync_offset();
  if (sync_offset_ == NULL) sync_offset_ = new ::client::SyncOffset;
  return sync_offset_;
}
inline ::client::SyncOffset* SyncRequest::release_sync_offset() {
  clear_has_sync_offset();
  ::client::SyncOffset* temp = sync_offset_;
  sync_offset_ = NULL;
  return temp;
}
inline void SyncRequest::set_allocated_sync_offset(::client::SyncOffset* sync_offset) {
  delete sync_offset_;
  sync_offset_ = sync_offset;
  if (sync_offset) {
    set_has_sync_offset();
  } else {
    clear_has_sync_offset();
  }
}

// optional .client.CmdRequest request = 5;
inline bool SyncRequest::has_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncRequest::set_has_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncRequest::clear_has_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncRequest::clear_request() {
  if (request_ != NULL) request_->::client::CmdRequest::Clear();
  clear_has_request();
}
inline const ::client::CmdRequest& SyncRequest::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::client::CmdRequest* SyncRequest::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::client::CmdRequest;
  return request_;
}
inline ::client::CmdRequest* SyncRequest::release_request() {
  clear_has_request();
  ::client::CmdRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void SyncRequest::set_allocated_request(::client::CmdRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
}

// optional .client.BinlogSkip binlog_skip = 6;
inline bool SyncRequest::has_binlog_skip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncRequest::set_has_binlog_skip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncRequest::clear_has_binlog_skip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncRequest::clear_binlog_skip() {
  if (binlog_skip_ != NULL) binlog_skip_->::client::BinlogSkip::Clear();
  clear_has_binlog_skip();
}
inline const ::client::BinlogSkip& SyncRequest::binlog_skip() const {
  return binlog_skip_ != NULL ? *binlog_skip_ : *default_instance_->binlog_skip_;
}
inline ::client::BinlogSkip* SyncRequest::mutable_binlog_skip() {
  set_has_binlog_skip();
  if (binlog_skip_ == NULL) binlog_skip_ = new ::client::BinlogSkip;
  return binlog_skip_;
}
inline ::client::BinlogSkip* SyncRequest::release_binlog_skip() {
  clear_has_binlog_skip();
  ::client::BinlogSkip* temp = binlog_skip_;
  binlog_skip_ = NULL;
  return temp;
}
inline void SyncRequest::set_allocated_binlog_skip(::client::BinlogSkip* binlog_skip) {
  delete binlog_skip_;
  binlog_skip_ = binlog_skip;
  if (binlog_skip) {
    set_has_binlog_skip();
  } else {
    clear_has_binlog_skip();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::Type>() {
  return ::client::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::SyncType>() {
  return ::client::SyncType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::client::StatusCode>() {
  return ::client::StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
