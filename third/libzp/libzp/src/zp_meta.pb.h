// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zp_meta.proto

#ifndef PROTOBUF_zp_5fmeta_2eproto__INCLUDED
#define PROTOBUF_zp_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ZPMeta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zp_5fmeta_2eproto();
void protobuf_AssignDesc_zp_5fmeta_2eproto();
void protobuf_ShutdownFile_zp_5fmeta_2eproto();

class Node;
class NodeStatus;
class Nodes;
class MetaNodes;
class Partitions;
class TableName;
class Table;
class BasicCmdUnit;
class SyncOffset;
class MetaCmd;
class MetaCmd_Ping;
class MetaCmd_Pull;
class MetaCmd_Init;
class MetaCmd_SetMaster;
class MetaCmd_AddSlave;
class MetaCmd_RemoveSlave;
class MetaCmd_DropTable;
class MetaCmdResponse;
class MetaCmdResponse_Ping;
class MetaCmdResponse_Pull;
class MetaCmdResponse_ListTable;
class MetaCmdResponse_ListNode;
class MetaCmdResponse_ListMeta;

enum StatusCode {
  OK = 0,
  NOTFOUND = 1,
  ERROR = 2
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = OK;
const StatusCode StatusCode_MAX = ERROR;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
enum Type {
  PING = 1,
  PULL = 2,
  INIT = 3,
  SETMASTER = 4,
  ADDSLAVE = 5,
  REMOVESLAVE = 6,
  LISTTABLE = 7,
  LISTNODE = 8,
  LISTMETA = 9,
  DROPTABLE = 10
};
bool Type_IsValid(int value);
const Type Type_MIN = PING;
const Type Type_MAX = DROPTABLE;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum PState {
  ACTIVE = 1,
  STUCK = 2
};
bool PState_IsValid(int value);
const PState PState_MIN = ACTIVE;
const PState PState_MAX = STUCK;
const int PState_ARRAYSIZE = PState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PState_descriptor();
inline const ::std::string& PState_Name(PState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PState_descriptor(), value);
}
inline bool PState_Parse(
    const ::std::string& name, PState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PState>(
    PState_descriptor(), name, value);
}
// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class NodeStatus : public ::google::protobuf::Message {
 public:
  NodeStatus();
  virtual ~NodeStatus();

  NodeStatus(const NodeStatus& from);

  inline NodeStatus& operator=(const NodeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStatus& default_instance();

  void Swap(NodeStatus* other);

  // implements Message ----------------------------------------------

  NodeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeStatus& from);
  void MergeFrom(const NodeStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.NodeStatus)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* node_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static NodeStatus* default_instance_;
};
// -------------------------------------------------------------------

class Nodes : public ::google::protobuf::Message {
 public:
  Nodes();
  virtual ~Nodes();

  Nodes(const Nodes& from);

  inline Nodes& operator=(const Nodes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Nodes& default_instance();

  void Swap(Nodes* other);

  // implements Message ----------------------------------------------

  Nodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Nodes& from);
  void MergeFrom(const Nodes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZPMeta.NodeStatus nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::ZPMeta::NodeStatus& nodes(int index) const;
  inline ::ZPMeta::NodeStatus* mutable_nodes(int index);
  inline ::ZPMeta::NodeStatus* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:ZPMeta.Nodes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Nodes* default_instance_;
};
// -------------------------------------------------------------------

class MetaNodes : public ::google::protobuf::Message {
 public:
  MetaNodes();
  virtual ~MetaNodes();

  MetaNodes(const MetaNodes& from);

  inline MetaNodes& operator=(const MetaNodes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaNodes& default_instance();

  void Swap(MetaNodes* other);

  // implements Message ----------------------------------------------

  MetaNodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaNodes& from);
  void MergeFrom(const MetaNodes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZPMeta.Node followers = 1;
  inline int followers_size() const;
  inline void clear_followers();
  static const int kFollowersFieldNumber = 1;
  inline const ::ZPMeta::Node& followers(int index) const;
  inline ::ZPMeta::Node* mutable_followers(int index);
  inline ::ZPMeta::Node* add_followers();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
      followers() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
      mutable_followers();

  // optional .ZPMeta.Node leader = 2;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 2;
  inline const ::ZPMeta::Node& leader() const;
  inline ::ZPMeta::Node* mutable_leader();
  inline ::ZPMeta::Node* release_leader();
  inline void set_allocated_leader(::ZPMeta::Node* leader);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaNodes)
 private:
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node > followers_;
  ::ZPMeta::Node* leader_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaNodes* default_instance_;
};
// -------------------------------------------------------------------

class Partitions : public ::google::protobuf::Message {
 public:
  Partitions();
  virtual ~Partitions();

  Partitions(const Partitions& from);

  inline Partitions& operator=(const Partitions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Partitions& default_instance();

  void Swap(Partitions* other);

  // implements Message ----------------------------------------------

  Partitions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Partitions& from);
  void MergeFrom(const Partitions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .ZPMeta.PState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::ZPMeta::PState state() const;
  inline void set_state(::ZPMeta::PState value);

  // required .ZPMeta.Node master = 3;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline const ::ZPMeta::Node& master() const;
  inline ::ZPMeta::Node* mutable_master();
  inline ::ZPMeta::Node* release_master();
  inline void set_allocated_master(::ZPMeta::Node* master);

  // repeated .ZPMeta.Node slaves = 4;
  inline int slaves_size() const;
  inline void clear_slaves();
  static const int kSlavesFieldNumber = 4;
  inline const ::ZPMeta::Node& slaves(int index) const;
  inline ::ZPMeta::Node* mutable_slaves(int index);
  inline ::ZPMeta::Node* add_slaves();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
      slaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
      mutable_slaves();

  // @@protoc_insertion_point(class_scope:ZPMeta.Partitions)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_master();
  inline void clear_has_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int state_;
  ::ZPMeta::Node* master_;
  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node > slaves_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Partitions* default_instance_;
};
// -------------------------------------------------------------------

class TableName : public ::google::protobuf::Message {
 public:
  TableName();
  virtual ~TableName();

  TableName(const TableName& from);

  inline TableName& operator=(const TableName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableName& default_instance();

  void Swap(TableName* other);

  // implements Message ----------------------------------------------

  TableName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableName& from);
  void MergeFrom(const TableName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:ZPMeta.TableName)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static TableName* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .ZPMeta.Partitions partitions = 2;
  inline int partitions_size() const;
  inline void clear_partitions();
  static const int kPartitionsFieldNumber = 2;
  inline const ::ZPMeta::Partitions& partitions(int index) const;
  inline ::ZPMeta::Partitions* mutable_partitions(int index);
  inline ::ZPMeta::Partitions* add_partitions();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >&
      partitions() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >*
      mutable_partitions();

  // @@protoc_insertion_point(class_scope:ZPMeta.Table)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions > partitions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class BasicCmdUnit : public ::google::protobuf::Message {
 public:
  BasicCmdUnit();
  virtual ~BasicCmdUnit();

  BasicCmdUnit(const BasicCmdUnit& from);

  inline BasicCmdUnit& operator=(const BasicCmdUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicCmdUnit& default_instance();

  void Swap(BasicCmdUnit* other);

  // implements Message ----------------------------------------------

  BasicCmdUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicCmdUnit& from);
  void MergeFrom(const BasicCmdUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 partition = 2;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 2;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // required .ZPMeta.Node node = 3;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 3;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // @@protoc_insertion_point(class_scope:ZPMeta.BasicCmdUnit)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::ZPMeta::Node* node_;
  ::google::protobuf::int32 partition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static BasicCmdUnit* default_instance_;
};
// -------------------------------------------------------------------

class SyncOffset : public ::google::protobuf::Message {
 public:
  SyncOffset();
  virtual ~SyncOffset();

  SyncOffset(const SyncOffset& from);

  inline SyncOffset& operator=(const SyncOffset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncOffset& default_instance();

  void Swap(SyncOffset* other);

  // implements Message ----------------------------------------------

  SyncOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncOffset& from);
  void MergeFrom(const SyncOffset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required int32 partition = 2;
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 2;
  inline ::google::protobuf::int32 partition() const;
  inline void set_partition(::google::protobuf::int32 value);

  // optional int32 filenum = 3;
  inline bool has_filenum() const;
  inline void clear_filenum();
  static const int kFilenumFieldNumber = 3;
  inline ::google::protobuf::int32 filenum() const;
  inline void set_filenum(::google::protobuf::int32 value);

  // optional int64 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.SyncOffset)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_filenum();
  inline void clear_has_filenum();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::google::protobuf::int32 partition_;
  ::google::protobuf::int32 filenum_;
  ::google::protobuf::int64 offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static SyncOffset* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_Ping : public ::google::protobuf::Message {
 public:
  MetaCmd_Ping();
  virtual ~MetaCmd_Ping();

  MetaCmd_Ping(const MetaCmd_Ping& from);

  inline MetaCmd_Ping& operator=(const MetaCmd_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_Ping& default_instance();

  void Swap(MetaCmd_Ping* other);

  // implements Message ----------------------------------------------

  MetaCmd_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_Ping& from);
  void MergeFrom(const MetaCmd_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required .ZPMeta.Node node = 2;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // repeated .ZPMeta.SyncOffset offset = 3;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline const ::ZPMeta::SyncOffset& offset(int index) const;
  inline ::ZPMeta::SyncOffset* mutable_offset(int index);
  inline ::ZPMeta::SyncOffset* add_offset();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::SyncOffset >&
      offset() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::SyncOffset >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.Ping)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* node_;
  ::google::protobuf::RepeatedPtrField< ::ZPMeta::SyncOffset > offset_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_Ping* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_Pull : public ::google::protobuf::Message {
 public:
  MetaCmd_Pull();
  virtual ~MetaCmd_Pull();

  MetaCmd_Pull(const MetaCmd_Pull& from);

  inline MetaCmd_Pull& operator=(const MetaCmd_Pull& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_Pull& default_instance();

  void Swap(MetaCmd_Pull* other);

  // implements Message ----------------------------------------------

  MetaCmd_Pull* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_Pull& from);
  void MergeFrom(const MetaCmd_Pull& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ZPMeta.Node node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::ZPMeta::Node& node() const;
  inline ::ZPMeta::Node* mutable_node();
  inline ::ZPMeta::Node* release_node();
  inline void set_allocated_node(::ZPMeta::Node* node);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.Pull)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Node* node_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_Pull* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_Init : public ::google::protobuf::Message {
 public:
  MetaCmd_Init();
  virtual ~MetaCmd_Init();

  MetaCmd_Init(const MetaCmd_Init& from);

  inline MetaCmd_Init& operator=(const MetaCmd_Init& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_Init& default_instance();

  void Swap(MetaCmd_Init* other);

  // implements Message ----------------------------------------------

  MetaCmd_Init* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_Init& from);
  void MergeFrom(const MetaCmd_Init& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.Init)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_Init* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_SetMaster : public ::google::protobuf::Message {
 public:
  MetaCmd_SetMaster();
  virtual ~MetaCmd_SetMaster();

  MetaCmd_SetMaster(const MetaCmd_SetMaster& from);

  inline MetaCmd_SetMaster& operator=(const MetaCmd_SetMaster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_SetMaster& default_instance();

  void Swap(MetaCmd_SetMaster* other);

  // implements Message ----------------------------------------------

  MetaCmd_SetMaster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_SetMaster& from);
  void MergeFrom(const MetaCmd_SetMaster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.BasicCmdUnit basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::ZPMeta::BasicCmdUnit& basic() const;
  inline ::ZPMeta::BasicCmdUnit* mutable_basic();
  inline ::ZPMeta::BasicCmdUnit* release_basic();
  inline void set_allocated_basic(::ZPMeta::BasicCmdUnit* basic);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.SetMaster)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::BasicCmdUnit* basic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_SetMaster* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_AddSlave : public ::google::protobuf::Message {
 public:
  MetaCmd_AddSlave();
  virtual ~MetaCmd_AddSlave();

  MetaCmd_AddSlave(const MetaCmd_AddSlave& from);

  inline MetaCmd_AddSlave& operator=(const MetaCmd_AddSlave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_AddSlave& default_instance();

  void Swap(MetaCmd_AddSlave* other);

  // implements Message ----------------------------------------------

  MetaCmd_AddSlave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_AddSlave& from);
  void MergeFrom(const MetaCmd_AddSlave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.BasicCmdUnit basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::ZPMeta::BasicCmdUnit& basic() const;
  inline ::ZPMeta::BasicCmdUnit* mutable_basic();
  inline ::ZPMeta::BasicCmdUnit* release_basic();
  inline void set_allocated_basic(::ZPMeta::BasicCmdUnit* basic);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.AddSlave)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::BasicCmdUnit* basic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_AddSlave* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_RemoveSlave : public ::google::protobuf::Message {
 public:
  MetaCmd_RemoveSlave();
  virtual ~MetaCmd_RemoveSlave();

  MetaCmd_RemoveSlave(const MetaCmd_RemoveSlave& from);

  inline MetaCmd_RemoveSlave& operator=(const MetaCmd_RemoveSlave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_RemoveSlave& default_instance();

  void Swap(MetaCmd_RemoveSlave* other);

  // implements Message ----------------------------------------------

  MetaCmd_RemoveSlave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_RemoveSlave& from);
  void MergeFrom(const MetaCmd_RemoveSlave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.BasicCmdUnit basic = 1;
  inline bool has_basic() const;
  inline void clear_basic();
  static const int kBasicFieldNumber = 1;
  inline const ::ZPMeta::BasicCmdUnit& basic() const;
  inline ::ZPMeta::BasicCmdUnit* mutable_basic();
  inline ::ZPMeta::BasicCmdUnit* release_basic();
  inline void set_allocated_basic(::ZPMeta::BasicCmdUnit* basic);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.RemoveSlave)
 private:
  inline void set_has_basic();
  inline void clear_has_basic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::BasicCmdUnit* basic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_RemoveSlave* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd_DropTable : public ::google::protobuf::Message {
 public:
  MetaCmd_DropTable();
  virtual ~MetaCmd_DropTable();

  MetaCmd_DropTable(const MetaCmd_DropTable& from);

  inline MetaCmd_DropTable& operator=(const MetaCmd_DropTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd_DropTable& default_instance();

  void Swap(MetaCmd_DropTable* other);

  // implements Message ----------------------------------------------

  MetaCmd_DropTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd_DropTable& from);
  void MergeFrom(const MetaCmd_DropTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd.DropTable)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd_DropTable* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmd : public ::google::protobuf::Message {
 public:
  MetaCmd();
  virtual ~MetaCmd();

  MetaCmd(const MetaCmd& from);

  inline MetaCmd& operator=(const MetaCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmd& default_instance();

  void Swap(MetaCmd* other);

  // implements Message ----------------------------------------------

  MetaCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmd& from);
  void MergeFrom(const MetaCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MetaCmd_Ping Ping;
  typedef MetaCmd_Pull Pull;
  typedef MetaCmd_Init Init;
  typedef MetaCmd_SetMaster SetMaster;
  typedef MetaCmd_AddSlave AddSlave;
  typedef MetaCmd_RemoveSlave RemoveSlave;
  typedef MetaCmd_DropTable DropTable;

  // accessors -------------------------------------------------------

  // required .ZPMeta.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ZPMeta::Type type() const;
  inline void set_type(::ZPMeta::Type value);

  // optional .ZPMeta.MetaCmd.Ping ping = 2;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 2;
  inline const ::ZPMeta::MetaCmd_Ping& ping() const;
  inline ::ZPMeta::MetaCmd_Ping* mutable_ping();
  inline ::ZPMeta::MetaCmd_Ping* release_ping();
  inline void set_allocated_ping(::ZPMeta::MetaCmd_Ping* ping);

  // optional .ZPMeta.MetaCmd.Pull pull = 3;
  inline bool has_pull() const;
  inline void clear_pull();
  static const int kPullFieldNumber = 3;
  inline const ::ZPMeta::MetaCmd_Pull& pull() const;
  inline ::ZPMeta::MetaCmd_Pull* mutable_pull();
  inline ::ZPMeta::MetaCmd_Pull* release_pull();
  inline void set_allocated_pull(::ZPMeta::MetaCmd_Pull* pull);

  // optional .ZPMeta.MetaCmd.Init init = 4;
  inline bool has_init() const;
  inline void clear_init();
  static const int kInitFieldNumber = 4;
  inline const ::ZPMeta::MetaCmd_Init& init() const;
  inline ::ZPMeta::MetaCmd_Init* mutable_init();
  inline ::ZPMeta::MetaCmd_Init* release_init();
  inline void set_allocated_init(::ZPMeta::MetaCmd_Init* init);

  // optional .ZPMeta.MetaCmd.SetMaster set_master = 5;
  inline bool has_set_master() const;
  inline void clear_set_master();
  static const int kSetMasterFieldNumber = 5;
  inline const ::ZPMeta::MetaCmd_SetMaster& set_master() const;
  inline ::ZPMeta::MetaCmd_SetMaster* mutable_set_master();
  inline ::ZPMeta::MetaCmd_SetMaster* release_set_master();
  inline void set_allocated_set_master(::ZPMeta::MetaCmd_SetMaster* set_master);

  // optional .ZPMeta.MetaCmd.AddSlave add_slave = 6;
  inline bool has_add_slave() const;
  inline void clear_add_slave();
  static const int kAddSlaveFieldNumber = 6;
  inline const ::ZPMeta::MetaCmd_AddSlave& add_slave() const;
  inline ::ZPMeta::MetaCmd_AddSlave* mutable_add_slave();
  inline ::ZPMeta::MetaCmd_AddSlave* release_add_slave();
  inline void set_allocated_add_slave(::ZPMeta::MetaCmd_AddSlave* add_slave);

  // optional .ZPMeta.MetaCmd.RemoveSlave remove_slave = 7;
  inline bool has_remove_slave() const;
  inline void clear_remove_slave();
  static const int kRemoveSlaveFieldNumber = 7;
  inline const ::ZPMeta::MetaCmd_RemoveSlave& remove_slave() const;
  inline ::ZPMeta::MetaCmd_RemoveSlave* mutable_remove_slave();
  inline ::ZPMeta::MetaCmd_RemoveSlave* release_remove_slave();
  inline void set_allocated_remove_slave(::ZPMeta::MetaCmd_RemoveSlave* remove_slave);

  // optional .ZPMeta.MetaCmd.DropTable drop_table = 8;
  inline bool has_drop_table() const;
  inline void clear_drop_table();
  static const int kDropTableFieldNumber = 8;
  inline const ::ZPMeta::MetaCmd_DropTable& drop_table() const;
  inline ::ZPMeta::MetaCmd_DropTable* mutable_drop_table();
  inline ::ZPMeta::MetaCmd_DropTable* release_drop_table();
  inline void set_allocated_drop_table(::ZPMeta::MetaCmd_DropTable* drop_table);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_pull();
  inline void clear_has_pull();
  inline void set_has_init();
  inline void clear_has_init();
  inline void set_has_set_master();
  inline void clear_has_set_master();
  inline void set_has_add_slave();
  inline void clear_has_add_slave();
  inline void set_has_remove_slave();
  inline void clear_has_remove_slave();
  inline void set_has_drop_table();
  inline void clear_has_drop_table();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::MetaCmd_Ping* ping_;
  ::ZPMeta::MetaCmd_Pull* pull_;
  ::ZPMeta::MetaCmd_Init* init_;
  ::ZPMeta::MetaCmd_SetMaster* set_master_;
  ::ZPMeta::MetaCmd_AddSlave* add_slave_;
  ::ZPMeta::MetaCmd_RemoveSlave* remove_slave_;
  ::ZPMeta::MetaCmd_DropTable* drop_table_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmd* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse_Ping : public ::google::protobuf::Message {
 public:
  MetaCmdResponse_Ping();
  virtual ~MetaCmdResponse_Ping();

  MetaCmdResponse_Ping(const MetaCmdResponse_Ping& from);

  inline MetaCmdResponse_Ping& operator=(const MetaCmdResponse_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse_Ping& default_instance();

  void Swap(MetaCmdResponse_Ping* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse_Ping& from);
  void MergeFrom(const MetaCmdResponse_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse.Ping)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse_Ping* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse_Pull : public ::google::protobuf::Message {
 public:
  MetaCmdResponse_Pull();
  virtual ~MetaCmdResponse_Pull();

  MetaCmdResponse_Pull(const MetaCmdResponse_Pull& from);

  inline MetaCmdResponse_Pull& operator=(const MetaCmdResponse_Pull& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse_Pull& default_instance();

  void Swap(MetaCmdResponse_Pull* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse_Pull* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse_Pull& from);
  void MergeFrom(const MetaCmdResponse_Pull& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // repeated .ZPMeta.Table info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ZPMeta::Table& info(int index) const;
  inline ::ZPMeta::Table* mutable_info(int index);
  inline ::ZPMeta::Table* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Table >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Table >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse.Pull)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZPMeta::Table > info_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse_Pull* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse_ListTable : public ::google::protobuf::Message {
 public:
  MetaCmdResponse_ListTable();
  virtual ~MetaCmdResponse_ListTable();

  MetaCmdResponse_ListTable(const MetaCmdResponse_ListTable& from);

  inline MetaCmdResponse_ListTable& operator=(const MetaCmdResponse_ListTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse_ListTable& default_instance();

  void Swap(MetaCmdResponse_ListTable* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse_ListTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse_ListTable& from);
  void MergeFrom(const MetaCmdResponse_ListTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ZPMeta.TableName tables = 1;
  inline bool has_tables() const;
  inline void clear_tables();
  static const int kTablesFieldNumber = 1;
  inline const ::ZPMeta::TableName& tables() const;
  inline ::ZPMeta::TableName* mutable_tables();
  inline ::ZPMeta::TableName* release_tables();
  inline void set_allocated_tables(::ZPMeta::TableName* tables);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse.ListTable)
 private:
  inline void set_has_tables();
  inline void clear_has_tables();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::TableName* tables_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse_ListTable* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse_ListNode : public ::google::protobuf::Message {
 public:
  MetaCmdResponse_ListNode();
  virtual ~MetaCmdResponse_ListNode();

  MetaCmdResponse_ListNode(const MetaCmdResponse_ListNode& from);

  inline MetaCmdResponse_ListNode& operator=(const MetaCmdResponse_ListNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse_ListNode& default_instance();

  void Swap(MetaCmdResponse_ListNode* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse_ListNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse_ListNode& from);
  void MergeFrom(const MetaCmdResponse_ListNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ZPMeta.Nodes nodes = 1;
  inline bool has_nodes() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::ZPMeta::Nodes& nodes() const;
  inline ::ZPMeta::Nodes* mutable_nodes();
  inline ::ZPMeta::Nodes* release_nodes();
  inline void set_allocated_nodes(::ZPMeta::Nodes* nodes);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse.ListNode)
 private:
  inline void set_has_nodes();
  inline void clear_has_nodes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::Nodes* nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse_ListNode* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse_ListMeta : public ::google::protobuf::Message {
 public:
  MetaCmdResponse_ListMeta();
  virtual ~MetaCmdResponse_ListMeta();

  MetaCmdResponse_ListMeta(const MetaCmdResponse_ListMeta& from);

  inline MetaCmdResponse_ListMeta& operator=(const MetaCmdResponse_ListMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse_ListMeta& default_instance();

  void Swap(MetaCmdResponse_ListMeta* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse_ListMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse_ListMeta& from);
  void MergeFrom(const MetaCmdResponse_ListMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ZPMeta.MetaNodes nodes = 1;
  inline bool has_nodes() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::ZPMeta::MetaNodes& nodes() const;
  inline ::ZPMeta::MetaNodes* mutable_nodes();
  inline ::ZPMeta::MetaNodes* release_nodes();
  inline void set_allocated_nodes(::ZPMeta::MetaNodes* nodes);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse.ListMeta)
 private:
  inline void set_has_nodes();
  inline void clear_has_nodes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ZPMeta::MetaNodes* nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse_ListMeta* default_instance_;
};
// -------------------------------------------------------------------

class MetaCmdResponse : public ::google::protobuf::Message {
 public:
  MetaCmdResponse();
  virtual ~MetaCmdResponse();

  MetaCmdResponse(const MetaCmdResponse& from);

  inline MetaCmdResponse& operator=(const MetaCmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaCmdResponse& default_instance();

  void Swap(MetaCmdResponse* other);

  // implements Message ----------------------------------------------

  MetaCmdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaCmdResponse& from);
  void MergeFrom(const MetaCmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MetaCmdResponse_Ping Ping;
  typedef MetaCmdResponse_Pull Pull;
  typedef MetaCmdResponse_ListTable ListTable;
  typedef MetaCmdResponse_ListNode ListNode;
  typedef MetaCmdResponse_ListMeta ListMeta;

  // accessors -------------------------------------------------------

  // required .ZPMeta.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ZPMeta::Type type() const;
  inline void set_type(::ZPMeta::Type value);

  // required .ZPMeta.StatusCode code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::ZPMeta::StatusCode code() const;
  inline void set_code(::ZPMeta::StatusCode value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .ZPMeta.MetaCmdResponse.Ping ping = 4;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 4;
  inline const ::ZPMeta::MetaCmdResponse_Ping& ping() const;
  inline ::ZPMeta::MetaCmdResponse_Ping* mutable_ping();
  inline ::ZPMeta::MetaCmdResponse_Ping* release_ping();
  inline void set_allocated_ping(::ZPMeta::MetaCmdResponse_Ping* ping);

  // optional .ZPMeta.MetaCmdResponse.Pull pull = 5;
  inline bool has_pull() const;
  inline void clear_pull();
  static const int kPullFieldNumber = 5;
  inline const ::ZPMeta::MetaCmdResponse_Pull& pull() const;
  inline ::ZPMeta::MetaCmdResponse_Pull* mutable_pull();
  inline ::ZPMeta::MetaCmdResponse_Pull* release_pull();
  inline void set_allocated_pull(::ZPMeta::MetaCmdResponse_Pull* pull);

  // optional .ZPMeta.MetaCmdResponse.ListTable list_table = 6;
  inline bool has_list_table() const;
  inline void clear_list_table();
  static const int kListTableFieldNumber = 6;
  inline const ::ZPMeta::MetaCmdResponse_ListTable& list_table() const;
  inline ::ZPMeta::MetaCmdResponse_ListTable* mutable_list_table();
  inline ::ZPMeta::MetaCmdResponse_ListTable* release_list_table();
  inline void set_allocated_list_table(::ZPMeta::MetaCmdResponse_ListTable* list_table);

  // optional .ZPMeta.MetaCmdResponse.ListNode list_node = 7;
  inline bool has_list_node() const;
  inline void clear_list_node();
  static const int kListNodeFieldNumber = 7;
  inline const ::ZPMeta::MetaCmdResponse_ListNode& list_node() const;
  inline ::ZPMeta::MetaCmdResponse_ListNode* mutable_list_node();
  inline ::ZPMeta::MetaCmdResponse_ListNode* release_list_node();
  inline void set_allocated_list_node(::ZPMeta::MetaCmdResponse_ListNode* list_node);

  // optional .ZPMeta.MetaCmdResponse.ListMeta list_meta = 8;
  inline bool has_list_meta() const;
  inline void clear_list_meta();
  static const int kListMetaFieldNumber = 8;
  inline const ::ZPMeta::MetaCmdResponse_ListMeta& list_meta() const;
  inline ::ZPMeta::MetaCmdResponse_ListMeta* mutable_list_meta();
  inline ::ZPMeta::MetaCmdResponse_ListMeta* release_list_meta();
  inline void set_allocated_list_meta(::ZPMeta::MetaCmdResponse_ListMeta* list_meta);

  // @@protoc_insertion_point(class_scope:ZPMeta.MetaCmdResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_pull();
  inline void clear_has_pull();
  inline void set_has_list_table();
  inline void clear_has_list_table();
  inline void set_has_list_node();
  inline void clear_has_list_node();
  inline void set_has_list_meta();
  inline void clear_has_list_meta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::std::string* msg_;
  ::ZPMeta::MetaCmdResponse_Ping* ping_;
  ::ZPMeta::MetaCmdResponse_Pull* pull_;
  ::ZPMeta::MetaCmdResponse_ListTable* list_table_;
  ::ZPMeta::MetaCmdResponse_ListNode* list_node_;
  ::ZPMeta::MetaCmdResponse_ListMeta* list_meta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_zp_5fmeta_2eproto();
  friend void protobuf_AssignDesc_zp_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_zp_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static MetaCmdResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// required string ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// NodeStatus

// required .ZPMeta.Node node = 1;
inline bool NodeStatus::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeStatus::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeStatus::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeStatus::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& NodeStatus::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* NodeStatus::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* NodeStatus::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void NodeStatus::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// required int32 status = 2;
inline bool NodeStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NodeStatus::status() const {
  return status_;
}
inline void NodeStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// Nodes

// repeated .ZPMeta.NodeStatus nodes = 1;
inline int Nodes::nodes_size() const {
  return nodes_.size();
}
inline void Nodes::clear_nodes() {
  nodes_.Clear();
}
inline const ::ZPMeta::NodeStatus& Nodes::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::ZPMeta::NodeStatus* Nodes::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::ZPMeta::NodeStatus* Nodes::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >&
Nodes::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::NodeStatus >*
Nodes::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// MetaNodes

// repeated .ZPMeta.Node followers = 1;
inline int MetaNodes::followers_size() const {
  return followers_.size();
}
inline void MetaNodes::clear_followers() {
  followers_.Clear();
}
inline const ::ZPMeta::Node& MetaNodes::followers(int index) const {
  return followers_.Get(index);
}
inline ::ZPMeta::Node* MetaNodes::mutable_followers(int index) {
  return followers_.Mutable(index);
}
inline ::ZPMeta::Node* MetaNodes::add_followers() {
  return followers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
MetaNodes::followers() const {
  return followers_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
MetaNodes::mutable_followers() {
  return &followers_;
}

// optional .ZPMeta.Node leader = 2;
inline bool MetaNodes::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaNodes::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaNodes::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaNodes::clear_leader() {
  if (leader_ != NULL) leader_->::ZPMeta::Node::Clear();
  clear_has_leader();
}
inline const ::ZPMeta::Node& MetaNodes::leader() const {
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::ZPMeta::Node* MetaNodes::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::ZPMeta::Node;
  return leader_;
}
inline ::ZPMeta::Node* MetaNodes::release_leader() {
  clear_has_leader();
  ::ZPMeta::Node* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void MetaNodes::set_allocated_leader(::ZPMeta::Node* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
}

// -------------------------------------------------------------------

// Partitions

// required int32 id = 1;
inline bool Partitions::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Partitions::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Partitions::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Partitions::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Partitions::id() const {
  return id_;
}
inline void Partitions::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .ZPMeta.PState state = 2;
inline bool Partitions::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Partitions::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Partitions::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Partitions::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::ZPMeta::PState Partitions::state() const {
  return static_cast< ::ZPMeta::PState >(state_);
}
inline void Partitions::set_state(::ZPMeta::PState value) {
  assert(::ZPMeta::PState_IsValid(value));
  set_has_state();
  state_ = value;
}

// required .ZPMeta.Node master = 3;
inline bool Partitions::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Partitions::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Partitions::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Partitions::clear_master() {
  if (master_ != NULL) master_->::ZPMeta::Node::Clear();
  clear_has_master();
}
inline const ::ZPMeta::Node& Partitions::master() const {
  return master_ != NULL ? *master_ : *default_instance_->master_;
}
inline ::ZPMeta::Node* Partitions::mutable_master() {
  set_has_master();
  if (master_ == NULL) master_ = new ::ZPMeta::Node;
  return master_;
}
inline ::ZPMeta::Node* Partitions::release_master() {
  clear_has_master();
  ::ZPMeta::Node* temp = master_;
  master_ = NULL;
  return temp;
}
inline void Partitions::set_allocated_master(::ZPMeta::Node* master) {
  delete master_;
  master_ = master;
  if (master) {
    set_has_master();
  } else {
    clear_has_master();
  }
}

// repeated .ZPMeta.Node slaves = 4;
inline int Partitions::slaves_size() const {
  return slaves_.size();
}
inline void Partitions::clear_slaves() {
  slaves_.Clear();
}
inline const ::ZPMeta::Node& Partitions::slaves(int index) const {
  return slaves_.Get(index);
}
inline ::ZPMeta::Node* Partitions::mutable_slaves(int index) {
  return slaves_.Mutable(index);
}
inline ::ZPMeta::Node* Partitions::add_slaves() {
  return slaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >&
Partitions::slaves() const {
  return slaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Node >*
Partitions::mutable_slaves() {
  return &slaves_;
}

// -------------------------------------------------------------------

// TableName

// repeated string name = 1;
inline int TableName::name_size() const {
  return name_.size();
}
inline void TableName::clear_name() {
  name_.Clear();
}
inline const ::std::string& TableName::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* TableName::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void TableName::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void TableName::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void TableName::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableName::add_name() {
  return name_.Add();
}
inline void TableName::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void TableName::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void TableName::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableName::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableName::mutable_name() {
  return &name_;
}

// -------------------------------------------------------------------

// Table

// required string name = 1;
inline bool Table::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Table::name() const {
  return *name_;
}
inline void Table::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Table::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Table::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Table::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Table::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ZPMeta.Partitions partitions = 2;
inline int Table::partitions_size() const {
  return partitions_.size();
}
inline void Table::clear_partitions() {
  partitions_.Clear();
}
inline const ::ZPMeta::Partitions& Table::partitions(int index) const {
  return partitions_.Get(index);
}
inline ::ZPMeta::Partitions* Table::mutable_partitions(int index) {
  return partitions_.Mutable(index);
}
inline ::ZPMeta::Partitions* Table::add_partitions() {
  return partitions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >&
Table::partitions() const {
  return partitions_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Partitions >*
Table::mutable_partitions() {
  return &partitions_;
}

// -------------------------------------------------------------------

// BasicCmdUnit

// required string name = 1;
inline bool BasicCmdUnit::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicCmdUnit::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicCmdUnit::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicCmdUnit::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BasicCmdUnit::name() const {
  return *name_;
}
inline void BasicCmdUnit::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BasicCmdUnit::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BasicCmdUnit::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicCmdUnit::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BasicCmdUnit::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicCmdUnit::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 partition = 2;
inline bool BasicCmdUnit::has_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicCmdUnit::set_has_partition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicCmdUnit::clear_has_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicCmdUnit::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 BasicCmdUnit::partition() const {
  return partition_;
}
inline void BasicCmdUnit::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
}

// required .ZPMeta.Node node = 3;
inline bool BasicCmdUnit::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicCmdUnit::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicCmdUnit::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicCmdUnit::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& BasicCmdUnit::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* BasicCmdUnit::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* BasicCmdUnit::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void BasicCmdUnit::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// -------------------------------------------------------------------

// SyncOffset

// required string table_name = 1;
inline bool SyncOffset::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncOffset::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncOffset::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncOffset::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& SyncOffset::table_name() const {
  return *table_name_;
}
inline void SyncOffset::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void SyncOffset::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void SyncOffset::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncOffset::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* SyncOffset::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncOffset::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 partition = 2;
inline bool SyncOffset::has_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncOffset::set_has_partition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncOffset::clear_has_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncOffset::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::google::protobuf::int32 SyncOffset::partition() const {
  return partition_;
}
inline void SyncOffset::set_partition(::google::protobuf::int32 value) {
  set_has_partition();
  partition_ = value;
}

// optional int32 filenum = 3;
inline bool SyncOffset::has_filenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncOffset::set_has_filenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncOffset::clear_has_filenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncOffset::clear_filenum() {
  filenum_ = 0;
  clear_has_filenum();
}
inline ::google::protobuf::int32 SyncOffset::filenum() const {
  return filenum_;
}
inline void SyncOffset::set_filenum(::google::protobuf::int32 value) {
  set_has_filenum();
  filenum_ = value;
}

// optional int64 offset = 4;
inline bool SyncOffset::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncOffset::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncOffset::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncOffset::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 SyncOffset::offset() const {
  return offset_;
}
inline void SyncOffset::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// MetaCmd_Ping

// required int32 version = 1;
inline bool MetaCmd_Ping::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_Ping::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_Ping::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_Ping::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 MetaCmd_Ping::version() const {
  return version_;
}
inline void MetaCmd_Ping::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required .ZPMeta.Node node = 2;
inline bool MetaCmd_Ping::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmd_Ping::set_has_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmd_Ping::clear_has_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmd_Ping::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& MetaCmd_Ping::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* MetaCmd_Ping::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* MetaCmd_Ping::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void MetaCmd_Ping::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// repeated .ZPMeta.SyncOffset offset = 3;
inline int MetaCmd_Ping::offset_size() const {
  return offset_.size();
}
inline void MetaCmd_Ping::clear_offset() {
  offset_.Clear();
}
inline const ::ZPMeta::SyncOffset& MetaCmd_Ping::offset(int index) const {
  return offset_.Get(index);
}
inline ::ZPMeta::SyncOffset* MetaCmd_Ping::mutable_offset(int index) {
  return offset_.Mutable(index);
}
inline ::ZPMeta::SyncOffset* MetaCmd_Ping::add_offset() {
  return offset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::SyncOffset >&
MetaCmd_Ping::offset() const {
  return offset_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::SyncOffset >*
MetaCmd_Ping::mutable_offset() {
  return &offset_;
}

// -------------------------------------------------------------------

// MetaCmd_Pull

// optional .ZPMeta.Node node = 1;
inline bool MetaCmd_Pull::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_Pull::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_Pull::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_Pull::clear_node() {
  if (node_ != NULL) node_->::ZPMeta::Node::Clear();
  clear_has_node();
}
inline const ::ZPMeta::Node& MetaCmd_Pull::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::ZPMeta::Node* MetaCmd_Pull::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::ZPMeta::Node;
  return node_;
}
inline ::ZPMeta::Node* MetaCmd_Pull::release_node() {
  clear_has_node();
  ::ZPMeta::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void MetaCmd_Pull::set_allocated_node(::ZPMeta::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// optional string name = 2;
inline bool MetaCmd_Pull::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmd_Pull::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmd_Pull::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmd_Pull::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MetaCmd_Pull::name() const {
  return *name_;
}
inline void MetaCmd_Pull::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MetaCmd_Pull::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MetaCmd_Pull::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaCmd_Pull::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MetaCmd_Pull::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaCmd_Pull::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MetaCmd_Init

// required string name = 1;
inline bool MetaCmd_Init::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_Init::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_Init::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_Init::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MetaCmd_Init::name() const {
  return *name_;
}
inline void MetaCmd_Init::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MetaCmd_Init::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MetaCmd_Init::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaCmd_Init::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MetaCmd_Init::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaCmd_Init::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 num = 2;
inline bool MetaCmd_Init::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmd_Init::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmd_Init::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmd_Init::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 MetaCmd_Init::num() const {
  return num_;
}
inline void MetaCmd_Init::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// MetaCmd_SetMaster

// required .ZPMeta.BasicCmdUnit basic = 1;
inline bool MetaCmd_SetMaster::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_SetMaster::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_SetMaster::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_SetMaster::clear_basic() {
  if (basic_ != NULL) basic_->::ZPMeta::BasicCmdUnit::Clear();
  clear_has_basic();
}
inline const ::ZPMeta::BasicCmdUnit& MetaCmd_SetMaster::basic() const {
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
inline ::ZPMeta::BasicCmdUnit* MetaCmd_SetMaster::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::ZPMeta::BasicCmdUnit;
  return basic_;
}
inline ::ZPMeta::BasicCmdUnit* MetaCmd_SetMaster::release_basic() {
  clear_has_basic();
  ::ZPMeta::BasicCmdUnit* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void MetaCmd_SetMaster::set_allocated_basic(::ZPMeta::BasicCmdUnit* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
}

// -------------------------------------------------------------------

// MetaCmd_AddSlave

// required .ZPMeta.BasicCmdUnit basic = 1;
inline bool MetaCmd_AddSlave::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_AddSlave::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_AddSlave::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_AddSlave::clear_basic() {
  if (basic_ != NULL) basic_->::ZPMeta::BasicCmdUnit::Clear();
  clear_has_basic();
}
inline const ::ZPMeta::BasicCmdUnit& MetaCmd_AddSlave::basic() const {
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
inline ::ZPMeta::BasicCmdUnit* MetaCmd_AddSlave::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::ZPMeta::BasicCmdUnit;
  return basic_;
}
inline ::ZPMeta::BasicCmdUnit* MetaCmd_AddSlave::release_basic() {
  clear_has_basic();
  ::ZPMeta::BasicCmdUnit* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void MetaCmd_AddSlave::set_allocated_basic(::ZPMeta::BasicCmdUnit* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
}

// -------------------------------------------------------------------

// MetaCmd_RemoveSlave

// required .ZPMeta.BasicCmdUnit basic = 1;
inline bool MetaCmd_RemoveSlave::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_RemoveSlave::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_RemoveSlave::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_RemoveSlave::clear_basic() {
  if (basic_ != NULL) basic_->::ZPMeta::BasicCmdUnit::Clear();
  clear_has_basic();
}
inline const ::ZPMeta::BasicCmdUnit& MetaCmd_RemoveSlave::basic() const {
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
inline ::ZPMeta::BasicCmdUnit* MetaCmd_RemoveSlave::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) basic_ = new ::ZPMeta::BasicCmdUnit;
  return basic_;
}
inline ::ZPMeta::BasicCmdUnit* MetaCmd_RemoveSlave::release_basic() {
  clear_has_basic();
  ::ZPMeta::BasicCmdUnit* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void MetaCmd_RemoveSlave::set_allocated_basic(::ZPMeta::BasicCmdUnit* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    set_has_basic();
  } else {
    clear_has_basic();
  }
}

// -------------------------------------------------------------------

// MetaCmd_DropTable

// required string name = 1;
inline bool MetaCmd_DropTable::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd_DropTable::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd_DropTable::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd_DropTable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MetaCmd_DropTable::name() const {
  return *name_;
}
inline void MetaCmd_DropTable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MetaCmd_DropTable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MetaCmd_DropTable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaCmd_DropTable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MetaCmd_DropTable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaCmd_DropTable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MetaCmd

// required .ZPMeta.Type type = 1;
inline bool MetaCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ZPMeta::Type MetaCmd::type() const {
  return static_cast< ::ZPMeta::Type >(type_);
}
inline void MetaCmd::set_type(::ZPMeta::Type value) {
  assert(::ZPMeta::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .ZPMeta.MetaCmd.Ping ping = 2;
inline bool MetaCmd::has_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmd::set_has_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmd::clear_has_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmd::clear_ping() {
  if (ping_ != NULL) ping_->::ZPMeta::MetaCmd_Ping::Clear();
  clear_has_ping();
}
inline const ::ZPMeta::MetaCmd_Ping& MetaCmd::ping() const {
  return ping_ != NULL ? *ping_ : *default_instance_->ping_;
}
inline ::ZPMeta::MetaCmd_Ping* MetaCmd::mutable_ping() {
  set_has_ping();
  if (ping_ == NULL) ping_ = new ::ZPMeta::MetaCmd_Ping;
  return ping_;
}
inline ::ZPMeta::MetaCmd_Ping* MetaCmd::release_ping() {
  clear_has_ping();
  ::ZPMeta::MetaCmd_Ping* temp = ping_;
  ping_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_ping(::ZPMeta::MetaCmd_Ping* ping) {
  delete ping_;
  ping_ = ping;
  if (ping) {
    set_has_ping();
  } else {
    clear_has_ping();
  }
}

// optional .ZPMeta.MetaCmd.Pull pull = 3;
inline bool MetaCmd::has_pull() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetaCmd::set_has_pull() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetaCmd::clear_has_pull() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetaCmd::clear_pull() {
  if (pull_ != NULL) pull_->::ZPMeta::MetaCmd_Pull::Clear();
  clear_has_pull();
}
inline const ::ZPMeta::MetaCmd_Pull& MetaCmd::pull() const {
  return pull_ != NULL ? *pull_ : *default_instance_->pull_;
}
inline ::ZPMeta::MetaCmd_Pull* MetaCmd::mutable_pull() {
  set_has_pull();
  if (pull_ == NULL) pull_ = new ::ZPMeta::MetaCmd_Pull;
  return pull_;
}
inline ::ZPMeta::MetaCmd_Pull* MetaCmd::release_pull() {
  clear_has_pull();
  ::ZPMeta::MetaCmd_Pull* temp = pull_;
  pull_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_pull(::ZPMeta::MetaCmd_Pull* pull) {
  delete pull_;
  pull_ = pull;
  if (pull) {
    set_has_pull();
  } else {
    clear_has_pull();
  }
}

// optional .ZPMeta.MetaCmd.Init init = 4;
inline bool MetaCmd::has_init() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MetaCmd::set_has_init() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MetaCmd::clear_has_init() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MetaCmd::clear_init() {
  if (init_ != NULL) init_->::ZPMeta::MetaCmd_Init::Clear();
  clear_has_init();
}
inline const ::ZPMeta::MetaCmd_Init& MetaCmd::init() const {
  return init_ != NULL ? *init_ : *default_instance_->init_;
}
inline ::ZPMeta::MetaCmd_Init* MetaCmd::mutable_init() {
  set_has_init();
  if (init_ == NULL) init_ = new ::ZPMeta::MetaCmd_Init;
  return init_;
}
inline ::ZPMeta::MetaCmd_Init* MetaCmd::release_init() {
  clear_has_init();
  ::ZPMeta::MetaCmd_Init* temp = init_;
  init_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_init(::ZPMeta::MetaCmd_Init* init) {
  delete init_;
  init_ = init;
  if (init) {
    set_has_init();
  } else {
    clear_has_init();
  }
}

// optional .ZPMeta.MetaCmd.SetMaster set_master = 5;
inline bool MetaCmd::has_set_master() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MetaCmd::set_has_set_master() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MetaCmd::clear_has_set_master() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MetaCmd::clear_set_master() {
  if (set_master_ != NULL) set_master_->::ZPMeta::MetaCmd_SetMaster::Clear();
  clear_has_set_master();
}
inline const ::ZPMeta::MetaCmd_SetMaster& MetaCmd::set_master() const {
  return set_master_ != NULL ? *set_master_ : *default_instance_->set_master_;
}
inline ::ZPMeta::MetaCmd_SetMaster* MetaCmd::mutable_set_master() {
  set_has_set_master();
  if (set_master_ == NULL) set_master_ = new ::ZPMeta::MetaCmd_SetMaster;
  return set_master_;
}
inline ::ZPMeta::MetaCmd_SetMaster* MetaCmd::release_set_master() {
  clear_has_set_master();
  ::ZPMeta::MetaCmd_SetMaster* temp = set_master_;
  set_master_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_set_master(::ZPMeta::MetaCmd_SetMaster* set_master) {
  delete set_master_;
  set_master_ = set_master;
  if (set_master) {
    set_has_set_master();
  } else {
    clear_has_set_master();
  }
}

// optional .ZPMeta.MetaCmd.AddSlave add_slave = 6;
inline bool MetaCmd::has_add_slave() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MetaCmd::set_has_add_slave() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MetaCmd::clear_has_add_slave() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MetaCmd::clear_add_slave() {
  if (add_slave_ != NULL) add_slave_->::ZPMeta::MetaCmd_AddSlave::Clear();
  clear_has_add_slave();
}
inline const ::ZPMeta::MetaCmd_AddSlave& MetaCmd::add_slave() const {
  return add_slave_ != NULL ? *add_slave_ : *default_instance_->add_slave_;
}
inline ::ZPMeta::MetaCmd_AddSlave* MetaCmd::mutable_add_slave() {
  set_has_add_slave();
  if (add_slave_ == NULL) add_slave_ = new ::ZPMeta::MetaCmd_AddSlave;
  return add_slave_;
}
inline ::ZPMeta::MetaCmd_AddSlave* MetaCmd::release_add_slave() {
  clear_has_add_slave();
  ::ZPMeta::MetaCmd_AddSlave* temp = add_slave_;
  add_slave_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_add_slave(::ZPMeta::MetaCmd_AddSlave* add_slave) {
  delete add_slave_;
  add_slave_ = add_slave;
  if (add_slave) {
    set_has_add_slave();
  } else {
    clear_has_add_slave();
  }
}

// optional .ZPMeta.MetaCmd.RemoveSlave remove_slave = 7;
inline bool MetaCmd::has_remove_slave() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MetaCmd::set_has_remove_slave() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MetaCmd::clear_has_remove_slave() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MetaCmd::clear_remove_slave() {
  if (remove_slave_ != NULL) remove_slave_->::ZPMeta::MetaCmd_RemoveSlave::Clear();
  clear_has_remove_slave();
}
inline const ::ZPMeta::MetaCmd_RemoveSlave& MetaCmd::remove_slave() const {
  return remove_slave_ != NULL ? *remove_slave_ : *default_instance_->remove_slave_;
}
inline ::ZPMeta::MetaCmd_RemoveSlave* MetaCmd::mutable_remove_slave() {
  set_has_remove_slave();
  if (remove_slave_ == NULL) remove_slave_ = new ::ZPMeta::MetaCmd_RemoveSlave;
  return remove_slave_;
}
inline ::ZPMeta::MetaCmd_RemoveSlave* MetaCmd::release_remove_slave() {
  clear_has_remove_slave();
  ::ZPMeta::MetaCmd_RemoveSlave* temp = remove_slave_;
  remove_slave_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_remove_slave(::ZPMeta::MetaCmd_RemoveSlave* remove_slave) {
  delete remove_slave_;
  remove_slave_ = remove_slave;
  if (remove_slave) {
    set_has_remove_slave();
  } else {
    clear_has_remove_slave();
  }
}

// optional .ZPMeta.MetaCmd.DropTable drop_table = 8;
inline bool MetaCmd::has_drop_table() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MetaCmd::set_has_drop_table() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MetaCmd::clear_has_drop_table() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MetaCmd::clear_drop_table() {
  if (drop_table_ != NULL) drop_table_->::ZPMeta::MetaCmd_DropTable::Clear();
  clear_has_drop_table();
}
inline const ::ZPMeta::MetaCmd_DropTable& MetaCmd::drop_table() const {
  return drop_table_ != NULL ? *drop_table_ : *default_instance_->drop_table_;
}
inline ::ZPMeta::MetaCmd_DropTable* MetaCmd::mutable_drop_table() {
  set_has_drop_table();
  if (drop_table_ == NULL) drop_table_ = new ::ZPMeta::MetaCmd_DropTable;
  return drop_table_;
}
inline ::ZPMeta::MetaCmd_DropTable* MetaCmd::release_drop_table() {
  clear_has_drop_table();
  ::ZPMeta::MetaCmd_DropTable* temp = drop_table_;
  drop_table_ = NULL;
  return temp;
}
inline void MetaCmd::set_allocated_drop_table(::ZPMeta::MetaCmd_DropTable* drop_table) {
  delete drop_table_;
  drop_table_ = drop_table;
  if (drop_table) {
    set_has_drop_table();
  } else {
    clear_has_drop_table();
  }
}

// -------------------------------------------------------------------

// MetaCmdResponse_Ping

// required int32 version = 1;
inline bool MetaCmdResponse_Ping::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse_Ping::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse_Ping::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse_Ping::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 MetaCmdResponse_Ping::version() const {
  return version_;
}
inline void MetaCmdResponse_Ping::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// MetaCmdResponse_Pull

// required int32 version = 1;
inline bool MetaCmdResponse_Pull::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse_Pull::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse_Pull::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse_Pull::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 MetaCmdResponse_Pull::version() const {
  return version_;
}
inline void MetaCmdResponse_Pull::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// repeated .ZPMeta.Table info = 2;
inline int MetaCmdResponse_Pull::info_size() const {
  return info_.size();
}
inline void MetaCmdResponse_Pull::clear_info() {
  info_.Clear();
}
inline const ::ZPMeta::Table& MetaCmdResponse_Pull::info(int index) const {
  return info_.Get(index);
}
inline ::ZPMeta::Table* MetaCmdResponse_Pull::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ZPMeta::Table* MetaCmdResponse_Pull::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZPMeta::Table >&
MetaCmdResponse_Pull::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZPMeta::Table >*
MetaCmdResponse_Pull::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MetaCmdResponse_ListTable

// optional .ZPMeta.TableName tables = 1;
inline bool MetaCmdResponse_ListTable::has_tables() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse_ListTable::set_has_tables() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse_ListTable::clear_has_tables() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse_ListTable::clear_tables() {
  if (tables_ != NULL) tables_->::ZPMeta::TableName::Clear();
  clear_has_tables();
}
inline const ::ZPMeta::TableName& MetaCmdResponse_ListTable::tables() const {
  return tables_ != NULL ? *tables_ : *default_instance_->tables_;
}
inline ::ZPMeta::TableName* MetaCmdResponse_ListTable::mutable_tables() {
  set_has_tables();
  if (tables_ == NULL) tables_ = new ::ZPMeta::TableName;
  return tables_;
}
inline ::ZPMeta::TableName* MetaCmdResponse_ListTable::release_tables() {
  clear_has_tables();
  ::ZPMeta::TableName* temp = tables_;
  tables_ = NULL;
  return temp;
}
inline void MetaCmdResponse_ListTable::set_allocated_tables(::ZPMeta::TableName* tables) {
  delete tables_;
  tables_ = tables;
  if (tables) {
    set_has_tables();
  } else {
    clear_has_tables();
  }
}

// -------------------------------------------------------------------

// MetaCmdResponse_ListNode

// optional .ZPMeta.Nodes nodes = 1;
inline bool MetaCmdResponse_ListNode::has_nodes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse_ListNode::set_has_nodes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse_ListNode::clear_has_nodes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse_ListNode::clear_nodes() {
  if (nodes_ != NULL) nodes_->::ZPMeta::Nodes::Clear();
  clear_has_nodes();
}
inline const ::ZPMeta::Nodes& MetaCmdResponse_ListNode::nodes() const {
  return nodes_ != NULL ? *nodes_ : *default_instance_->nodes_;
}
inline ::ZPMeta::Nodes* MetaCmdResponse_ListNode::mutable_nodes() {
  set_has_nodes();
  if (nodes_ == NULL) nodes_ = new ::ZPMeta::Nodes;
  return nodes_;
}
inline ::ZPMeta::Nodes* MetaCmdResponse_ListNode::release_nodes() {
  clear_has_nodes();
  ::ZPMeta::Nodes* temp = nodes_;
  nodes_ = NULL;
  return temp;
}
inline void MetaCmdResponse_ListNode::set_allocated_nodes(::ZPMeta::Nodes* nodes) {
  delete nodes_;
  nodes_ = nodes;
  if (nodes) {
    set_has_nodes();
  } else {
    clear_has_nodes();
  }
}

// -------------------------------------------------------------------

// MetaCmdResponse_ListMeta

// required .ZPMeta.MetaNodes nodes = 1;
inline bool MetaCmdResponse_ListMeta::has_nodes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse_ListMeta::set_has_nodes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse_ListMeta::clear_has_nodes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse_ListMeta::clear_nodes() {
  if (nodes_ != NULL) nodes_->::ZPMeta::MetaNodes::Clear();
  clear_has_nodes();
}
inline const ::ZPMeta::MetaNodes& MetaCmdResponse_ListMeta::nodes() const {
  return nodes_ != NULL ? *nodes_ : *default_instance_->nodes_;
}
inline ::ZPMeta::MetaNodes* MetaCmdResponse_ListMeta::mutable_nodes() {
  set_has_nodes();
  if (nodes_ == NULL) nodes_ = new ::ZPMeta::MetaNodes;
  return nodes_;
}
inline ::ZPMeta::MetaNodes* MetaCmdResponse_ListMeta::release_nodes() {
  clear_has_nodes();
  ::ZPMeta::MetaNodes* temp = nodes_;
  nodes_ = NULL;
  return temp;
}
inline void MetaCmdResponse_ListMeta::set_allocated_nodes(::ZPMeta::MetaNodes* nodes) {
  delete nodes_;
  nodes_ = nodes;
  if (nodes) {
    set_has_nodes();
  } else {
    clear_has_nodes();
  }
}

// -------------------------------------------------------------------

// MetaCmdResponse

// required .ZPMeta.Type type = 1;
inline bool MetaCmdResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaCmdResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaCmdResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaCmdResponse::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ZPMeta::Type MetaCmdResponse::type() const {
  return static_cast< ::ZPMeta::Type >(type_);
}
inline void MetaCmdResponse::set_type(::ZPMeta::Type value) {
  assert(::ZPMeta::Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .ZPMeta.StatusCode code = 2;
inline bool MetaCmdResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaCmdResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MetaCmdResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MetaCmdResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::ZPMeta::StatusCode MetaCmdResponse::code() const {
  return static_cast< ::ZPMeta::StatusCode >(code_);
}
inline void MetaCmdResponse::set_code(::ZPMeta::StatusCode value) {
  assert(::ZPMeta::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
}

// optional string msg = 3;
inline bool MetaCmdResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetaCmdResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MetaCmdResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MetaCmdResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& MetaCmdResponse::msg() const {
  return *msg_;
}
inline void MetaCmdResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MetaCmdResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void MetaCmdResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaCmdResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* MetaCmdResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaCmdResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ZPMeta.MetaCmdResponse.Ping ping = 4;
inline bool MetaCmdResponse::has_ping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MetaCmdResponse::set_has_ping() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MetaCmdResponse::clear_has_ping() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MetaCmdResponse::clear_ping() {
  if (ping_ != NULL) ping_->::ZPMeta::MetaCmdResponse_Ping::Clear();
  clear_has_ping();
}
inline const ::ZPMeta::MetaCmdResponse_Ping& MetaCmdResponse::ping() const {
  return ping_ != NULL ? *ping_ : *default_instance_->ping_;
}
inline ::ZPMeta::MetaCmdResponse_Ping* MetaCmdResponse::mutable_ping() {
  set_has_ping();
  if (ping_ == NULL) ping_ = new ::ZPMeta::MetaCmdResponse_Ping;
  return ping_;
}
inline ::ZPMeta::MetaCmdResponse_Ping* MetaCmdResponse::release_ping() {
  clear_has_ping();
  ::ZPMeta::MetaCmdResponse_Ping* temp = ping_;
  ping_ = NULL;
  return temp;
}
inline void MetaCmdResponse::set_allocated_ping(::ZPMeta::MetaCmdResponse_Ping* ping) {
  delete ping_;
  ping_ = ping;
  if (ping) {
    set_has_ping();
  } else {
    clear_has_ping();
  }
}

// optional .ZPMeta.MetaCmdResponse.Pull pull = 5;
inline bool MetaCmdResponse::has_pull() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MetaCmdResponse::set_has_pull() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MetaCmdResponse::clear_has_pull() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MetaCmdResponse::clear_pull() {
  if (pull_ != NULL) pull_->::ZPMeta::MetaCmdResponse_Pull::Clear();
  clear_has_pull();
}
inline const ::ZPMeta::MetaCmdResponse_Pull& MetaCmdResponse::pull() const {
  return pull_ != NULL ? *pull_ : *default_instance_->pull_;
}
inline ::ZPMeta::MetaCmdResponse_Pull* MetaCmdResponse::mutable_pull() {
  set_has_pull();
  if (pull_ == NULL) pull_ = new ::ZPMeta::MetaCmdResponse_Pull;
  return pull_;
}
inline ::ZPMeta::MetaCmdResponse_Pull* MetaCmdResponse::release_pull() {
  clear_has_pull();
  ::ZPMeta::MetaCmdResponse_Pull* temp = pull_;
  pull_ = NULL;
  return temp;
}
inline void MetaCmdResponse::set_allocated_pull(::ZPMeta::MetaCmdResponse_Pull* pull) {
  delete pull_;
  pull_ = pull;
  if (pull) {
    set_has_pull();
  } else {
    clear_has_pull();
  }
}

// optional .ZPMeta.MetaCmdResponse.ListTable list_table = 6;
inline bool MetaCmdResponse::has_list_table() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MetaCmdResponse::set_has_list_table() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MetaCmdResponse::clear_has_list_table() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MetaCmdResponse::clear_list_table() {
  if (list_table_ != NULL) list_table_->::ZPMeta::MetaCmdResponse_ListTable::Clear();
  clear_has_list_table();
}
inline const ::ZPMeta::MetaCmdResponse_ListTable& MetaCmdResponse::list_table() const {
  return list_table_ != NULL ? *list_table_ : *default_instance_->list_table_;
}
inline ::ZPMeta::MetaCmdResponse_ListTable* MetaCmdResponse::mutable_list_table() {
  set_has_list_table();
  if (list_table_ == NULL) list_table_ = new ::ZPMeta::MetaCmdResponse_ListTable;
  return list_table_;
}
inline ::ZPMeta::MetaCmdResponse_ListTable* MetaCmdResponse::release_list_table() {
  clear_has_list_table();
  ::ZPMeta::MetaCmdResponse_ListTable* temp = list_table_;
  list_table_ = NULL;
  return temp;
}
inline void MetaCmdResponse::set_allocated_list_table(::ZPMeta::MetaCmdResponse_ListTable* list_table) {
  delete list_table_;
  list_table_ = list_table;
  if (list_table) {
    set_has_list_table();
  } else {
    clear_has_list_table();
  }
}

// optional .ZPMeta.MetaCmdResponse.ListNode list_node = 7;
inline bool MetaCmdResponse::has_list_node() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MetaCmdResponse::set_has_list_node() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MetaCmdResponse::clear_has_list_node() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MetaCmdResponse::clear_list_node() {
  if (list_node_ != NULL) list_node_->::ZPMeta::MetaCmdResponse_ListNode::Clear();
  clear_has_list_node();
}
inline const ::ZPMeta::MetaCmdResponse_ListNode& MetaCmdResponse::list_node() const {
  return list_node_ != NULL ? *list_node_ : *default_instance_->list_node_;
}
inline ::ZPMeta::MetaCmdResponse_ListNode* MetaCmdResponse::mutable_list_node() {
  set_has_list_node();
  if (list_node_ == NULL) list_node_ = new ::ZPMeta::MetaCmdResponse_ListNode;
  return list_node_;
}
inline ::ZPMeta::MetaCmdResponse_ListNode* MetaCmdResponse::release_list_node() {
  clear_has_list_node();
  ::ZPMeta::MetaCmdResponse_ListNode* temp = list_node_;
  list_node_ = NULL;
  return temp;
}
inline void MetaCmdResponse::set_allocated_list_node(::ZPMeta::MetaCmdResponse_ListNode* list_node) {
  delete list_node_;
  list_node_ = list_node;
  if (list_node) {
    set_has_list_node();
  } else {
    clear_has_list_node();
  }
}

// optional .ZPMeta.MetaCmdResponse.ListMeta list_meta = 8;
inline bool MetaCmdResponse::has_list_meta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MetaCmdResponse::set_has_list_meta() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MetaCmdResponse::clear_has_list_meta() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MetaCmdResponse::clear_list_meta() {
  if (list_meta_ != NULL) list_meta_->::ZPMeta::MetaCmdResponse_ListMeta::Clear();
  clear_has_list_meta();
}
inline const ::ZPMeta::MetaCmdResponse_ListMeta& MetaCmdResponse::list_meta() const {
  return list_meta_ != NULL ? *list_meta_ : *default_instance_->list_meta_;
}
inline ::ZPMeta::MetaCmdResponse_ListMeta* MetaCmdResponse::mutable_list_meta() {
  set_has_list_meta();
  if (list_meta_ == NULL) list_meta_ = new ::ZPMeta::MetaCmdResponse_ListMeta;
  return list_meta_;
}
inline ::ZPMeta::MetaCmdResponse_ListMeta* MetaCmdResponse::release_list_meta() {
  clear_has_list_meta();
  ::ZPMeta::MetaCmdResponse_ListMeta* temp = list_meta_;
  list_meta_ = NULL;
  return temp;
}
inline void MetaCmdResponse::set_allocated_list_meta(::ZPMeta::MetaCmdResponse_ListMeta* list_meta) {
  delete list_meta_;
  list_meta_ = list_meta;
  if (list_meta) {
    set_has_list_meta();
  } else {
    clear_has_list_meta();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZPMeta

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPMeta::StatusCode>() {
  return ::ZPMeta::StatusCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPMeta::Type>() {
  return ::ZPMeta::Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZPMeta::PState>() {
  return ::ZPMeta::PState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zp_5fmeta_2eproto__INCLUDED
