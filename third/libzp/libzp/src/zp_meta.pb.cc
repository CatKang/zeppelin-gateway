// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zp_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zp_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZPMeta {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Nodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Partitions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Partitions_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_reflection_ = NULL;
const ::google::protobuf::Descriptor* BasicCmdUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicCmdUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_Pull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_Pull_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_Init_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_Init_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_SetMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_SetMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_AddSlave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_AddSlave_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_RemoveSlave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_RemoveSlave_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmd_DropTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmd_DropTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmdResponse_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmdResponse_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmdResponse_Pull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmdResponse_Pull_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmdResponse_ListTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmdResponse_ListTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmdResponse_ListNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmdResponse_ListNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaCmdResponse_ListMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaCmdResponse_ListMeta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zp_5fmeta_2eproto() {
  protobuf_AddDesc_zp_5fmeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zp_meta.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, port_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  NodeStatus_descriptor_ = file->message_type(1);
  static const int NodeStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, status_),
  };
  NodeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStatus_descriptor_,
      NodeStatus::default_instance_,
      NodeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStatus));
  Nodes_descriptor_ = file->message_type(2);
  static const int Nodes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, nodes_),
  };
  Nodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Nodes_descriptor_,
      Nodes::default_instance_,
      Nodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Nodes));
  MetaNodes_descriptor_ = file->message_type(3);
  static const int MetaNodes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNodes, followers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNodes, leader_),
  };
  MetaNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaNodes_descriptor_,
      MetaNodes::default_instance_,
      MetaNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaNodes));
  Partitions_descriptor_ = file->message_type(4);
  static const int Partitions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partitions, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partitions, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partitions, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partitions, slaves_),
  };
  Partitions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Partitions_descriptor_,
      Partitions::default_instance_,
      Partitions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partitions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partitions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Partitions));
  TableName_descriptor_ = file->message_type(5);
  static const int TableName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, name_),
  };
  TableName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableName_descriptor_,
      TableName::default_instance_,
      TableName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableName));
  Table_descriptor_ = file->message_type(6);
  static const int Table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, partitions_),
  };
  Table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Table_descriptor_,
      Table::default_instance_,
      Table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Table));
  BasicCmdUnit_descriptor_ = file->message_type(7);
  static const int BasicCmdUnit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicCmdUnit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicCmdUnit, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicCmdUnit, node_),
  };
  BasicCmdUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicCmdUnit_descriptor_,
      BasicCmdUnit::default_instance_,
      BasicCmdUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicCmdUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicCmdUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicCmdUnit));
  SyncOffset_descriptor_ = file->message_type(8);
  static const int SyncOffset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOffset, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOffset, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOffset, filenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOffset, offset_),
  };
  SyncOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncOffset_descriptor_,
      SyncOffset::default_instance_,
      SyncOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncOffset));
  MetaCmd_descriptor_ = file->message_type(9);
  static const int MetaCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, pull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, set_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, add_slave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, remove_slave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, drop_table_),
  };
  MetaCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_descriptor_,
      MetaCmd::default_instance_,
      MetaCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd));
  MetaCmd_Ping_descriptor_ = MetaCmd_descriptor_->nested_type(0);
  static const int MetaCmd_Ping_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Ping, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Ping, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Ping, offset_),
  };
  MetaCmd_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_Ping_descriptor_,
      MetaCmd_Ping::default_instance_,
      MetaCmd_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_Ping));
  MetaCmd_Pull_descriptor_ = MetaCmd_descriptor_->nested_type(1);
  static const int MetaCmd_Pull_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Pull, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Pull, name_),
  };
  MetaCmd_Pull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_Pull_descriptor_,
      MetaCmd_Pull::default_instance_,
      MetaCmd_Pull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Pull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Pull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_Pull));
  MetaCmd_Init_descriptor_ = MetaCmd_descriptor_->nested_type(2);
  static const int MetaCmd_Init_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Init, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Init, num_),
  };
  MetaCmd_Init_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_Init_descriptor_,
      MetaCmd_Init::default_instance_,
      MetaCmd_Init_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Init, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_Init, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_Init));
  MetaCmd_SetMaster_descriptor_ = MetaCmd_descriptor_->nested_type(3);
  static const int MetaCmd_SetMaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_SetMaster, basic_),
  };
  MetaCmd_SetMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_SetMaster_descriptor_,
      MetaCmd_SetMaster::default_instance_,
      MetaCmd_SetMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_SetMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_SetMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_SetMaster));
  MetaCmd_AddSlave_descriptor_ = MetaCmd_descriptor_->nested_type(4);
  static const int MetaCmd_AddSlave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_AddSlave, basic_),
  };
  MetaCmd_AddSlave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_AddSlave_descriptor_,
      MetaCmd_AddSlave::default_instance_,
      MetaCmd_AddSlave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_AddSlave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_AddSlave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_AddSlave));
  MetaCmd_RemoveSlave_descriptor_ = MetaCmd_descriptor_->nested_type(5);
  static const int MetaCmd_RemoveSlave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_RemoveSlave, basic_),
  };
  MetaCmd_RemoveSlave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_RemoveSlave_descriptor_,
      MetaCmd_RemoveSlave::default_instance_,
      MetaCmd_RemoveSlave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_RemoveSlave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_RemoveSlave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_RemoveSlave));
  MetaCmd_DropTable_descriptor_ = MetaCmd_descriptor_->nested_type(6);
  static const int MetaCmd_DropTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_DropTable, name_),
  };
  MetaCmd_DropTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmd_DropTable_descriptor_,
      MetaCmd_DropTable::default_instance_,
      MetaCmd_DropTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_DropTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmd_DropTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmd_DropTable));
  MetaCmdResponse_descriptor_ = file->message_type(10);
  static const int MetaCmdResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, pull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, list_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, list_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, list_meta_),
  };
  MetaCmdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmdResponse_descriptor_,
      MetaCmdResponse::default_instance_,
      MetaCmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmdResponse));
  MetaCmdResponse_Ping_descriptor_ = MetaCmdResponse_descriptor_->nested_type(0);
  static const int MetaCmdResponse_Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Ping, version_),
  };
  MetaCmdResponse_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmdResponse_Ping_descriptor_,
      MetaCmdResponse_Ping::default_instance_,
      MetaCmdResponse_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmdResponse_Ping));
  MetaCmdResponse_Pull_descriptor_ = MetaCmdResponse_descriptor_->nested_type(1);
  static const int MetaCmdResponse_Pull_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Pull, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Pull, info_),
  };
  MetaCmdResponse_Pull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmdResponse_Pull_descriptor_,
      MetaCmdResponse_Pull::default_instance_,
      MetaCmdResponse_Pull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Pull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_Pull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmdResponse_Pull));
  MetaCmdResponse_ListTable_descriptor_ = MetaCmdResponse_descriptor_->nested_type(2);
  static const int MetaCmdResponse_ListTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListTable, tables_),
  };
  MetaCmdResponse_ListTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmdResponse_ListTable_descriptor_,
      MetaCmdResponse_ListTable::default_instance_,
      MetaCmdResponse_ListTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmdResponse_ListTable));
  MetaCmdResponse_ListNode_descriptor_ = MetaCmdResponse_descriptor_->nested_type(3);
  static const int MetaCmdResponse_ListNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListNode, nodes_),
  };
  MetaCmdResponse_ListNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmdResponse_ListNode_descriptor_,
      MetaCmdResponse_ListNode::default_instance_,
      MetaCmdResponse_ListNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmdResponse_ListNode));
  MetaCmdResponse_ListMeta_descriptor_ = MetaCmdResponse_descriptor_->nested_type(4);
  static const int MetaCmdResponse_ListMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListMeta, nodes_),
  };
  MetaCmdResponse_ListMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaCmdResponse_ListMeta_descriptor_,
      MetaCmdResponse_ListMeta::default_instance_,
      MetaCmdResponse_ListMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaCmdResponse_ListMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaCmdResponse_ListMeta));
  StatusCode_descriptor_ = file->enum_type(0);
  Type_descriptor_ = file->enum_type(1);
  PState_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zp_5fmeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStatus_descriptor_, &NodeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Nodes_descriptor_, &Nodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaNodes_descriptor_, &MetaNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Partitions_descriptor_, &Partitions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableName_descriptor_, &TableName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Table_descriptor_, &Table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicCmdUnit_descriptor_, &BasicCmdUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncOffset_descriptor_, &SyncOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_descriptor_, &MetaCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_Ping_descriptor_, &MetaCmd_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_Pull_descriptor_, &MetaCmd_Pull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_Init_descriptor_, &MetaCmd_Init::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_SetMaster_descriptor_, &MetaCmd_SetMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_AddSlave_descriptor_, &MetaCmd_AddSlave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_RemoveSlave_descriptor_, &MetaCmd_RemoveSlave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmd_DropTable_descriptor_, &MetaCmd_DropTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmdResponse_descriptor_, &MetaCmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmdResponse_Ping_descriptor_, &MetaCmdResponse_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmdResponse_Pull_descriptor_, &MetaCmdResponse_Pull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmdResponse_ListTable_descriptor_, &MetaCmdResponse_ListTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmdResponse_ListNode_descriptor_, &MetaCmdResponse_ListNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaCmdResponse_ListMeta_descriptor_, &MetaCmdResponse_ListMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zp_5fmeta_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete NodeStatus::default_instance_;
  delete NodeStatus_reflection_;
  delete Nodes::default_instance_;
  delete Nodes_reflection_;
  delete MetaNodes::default_instance_;
  delete MetaNodes_reflection_;
  delete Partitions::default_instance_;
  delete Partitions_reflection_;
  delete TableName::default_instance_;
  delete TableName_reflection_;
  delete Table::default_instance_;
  delete Table_reflection_;
  delete BasicCmdUnit::default_instance_;
  delete BasicCmdUnit_reflection_;
  delete SyncOffset::default_instance_;
  delete SyncOffset_reflection_;
  delete MetaCmd::default_instance_;
  delete MetaCmd_reflection_;
  delete MetaCmd_Ping::default_instance_;
  delete MetaCmd_Ping_reflection_;
  delete MetaCmd_Pull::default_instance_;
  delete MetaCmd_Pull_reflection_;
  delete MetaCmd_Init::default_instance_;
  delete MetaCmd_Init_reflection_;
  delete MetaCmd_SetMaster::default_instance_;
  delete MetaCmd_SetMaster_reflection_;
  delete MetaCmd_AddSlave::default_instance_;
  delete MetaCmd_AddSlave_reflection_;
  delete MetaCmd_RemoveSlave::default_instance_;
  delete MetaCmd_RemoveSlave_reflection_;
  delete MetaCmd_DropTable::default_instance_;
  delete MetaCmd_DropTable_reflection_;
  delete MetaCmdResponse::default_instance_;
  delete MetaCmdResponse_reflection_;
  delete MetaCmdResponse_Ping::default_instance_;
  delete MetaCmdResponse_Ping_reflection_;
  delete MetaCmdResponse_Pull::default_instance_;
  delete MetaCmdResponse_Pull_reflection_;
  delete MetaCmdResponse_ListTable::default_instance_;
  delete MetaCmdResponse_ListTable_reflection_;
  delete MetaCmdResponse_ListNode::default_instance_;
  delete MetaCmdResponse_ListNode_reflection_;
  delete MetaCmdResponse_ListMeta::default_instance_;
  delete MetaCmdResponse_ListMeta_reflection_;
}

void protobuf_AddDesc_zp_5fmeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rzp_meta.proto\022\006ZPMeta\" \n\004Node\022\n\n\002ip\030\001 "
    "\002(\t\022\014\n\004port\030\002 \002(\005\"8\n\nNodeStatus\022\032\n\004node\030"
    "\001 \002(\0132\014.ZPMeta.Node\022\016\n\006status\030\002 \002(\005\"*\n\005N"
    "odes\022!\n\005nodes\030\001 \003(\0132\022.ZPMeta.NodeStatus\""
    "J\n\tMetaNodes\022\037\n\tfollowers\030\001 \003(\0132\014.ZPMeta"
    ".Node\022\034\n\006leader\030\002 \001(\0132\014.ZPMeta.Node\"s\n\nP"
    "artitions\022\n\n\002id\030\001 \002(\005\022\035\n\005state\030\002 \002(\0162\016.Z"
    "PMeta.PState\022\034\n\006master\030\003 \002(\0132\014.ZPMeta.No"
    "de\022\034\n\006slaves\030\004 \003(\0132\014.ZPMeta.Node\"\031\n\tTabl"
    "eName\022\014\n\004name\030\001 \003(\t\"=\n\005Table\022\014\n\004name\030\001 \002"
    "(\t\022&\n\npartitions\030\002 \003(\0132\022.ZPMeta.Partitio"
    "ns\"K\n\014BasicCmdUnit\022\014\n\004name\030\001 \002(\t\022\021\n\tpart"
    "ition\030\002 \002(\005\022\032\n\004node\030\003 \002(\0132\014.ZPMeta.Node\""
    "T\n\nSyncOffset\022\022\n\ntable_name\030\001 \002(\t\022\021\n\tpar"
    "tition\030\002 \002(\005\022\017\n\007filenum\030\003 \001(\005\022\016\n\006offset\030"
    "\004 \001(\003\"\257\005\n\007MetaCmd\022\032\n\004type\030\001 \002(\0162\014.ZPMeta"
    ".Type\022\"\n\004ping\030\002 \001(\0132\024.ZPMeta.MetaCmd.Pin"
    "g\022\"\n\004pull\030\003 \001(\0132\024.ZPMeta.MetaCmd.Pull\022\"\n"
    "\004init\030\004 \001(\0132\024.ZPMeta.MetaCmd.Init\022-\n\nset"
    "_master\030\005 \001(\0132\031.ZPMeta.MetaCmd.SetMaster"
    "\022+\n\tadd_slave\030\006 \001(\0132\030.ZPMeta.MetaCmd.Add"
    "Slave\0221\n\014remove_slave\030\007 \001(\0132\033.ZPMeta.Met"
    "aCmd.RemoveSlave\022-\n\ndrop_table\030\010 \001(\0132\031.Z"
    "PMeta.MetaCmd.DropTable\032W\n\004Ping\022\017\n\007versi"
    "on\030\001 \002(\005\022\032\n\004node\030\002 \002(\0132\014.ZPMeta.Node\022\"\n\006"
    "offset\030\003 \003(\0132\022.ZPMeta.SyncOffset\0320\n\004Pull"
    "\022\032\n\004node\030\001 \001(\0132\014.ZPMeta.Node\022\014\n\004name\030\002 \001"
    "(\t\032!\n\004Init\022\014\n\004name\030\001 \002(\t\022\013\n\003num\030\002 \002(\005\0320\n"
    "\tSetMaster\022#\n\005basic\030\001 \002(\0132\024.ZPMeta.Basic"
    "CmdUnit\032/\n\010AddSlave\022#\n\005basic\030\001 \002(\0132\024.ZPM"
    "eta.BasicCmdUnit\0322\n\013RemoveSlave\022#\n\005basic"
    "\030\001 \002(\0132\024.ZPMeta.BasicCmdUnit\032\031\n\tDropTabl"
    "e\022\014\n\004name\030\001 \002(\t\"\254\004\n\017MetaCmdResponse\022\032\n\004t"
    "ype\030\001 \002(\0162\014.ZPMeta.Type\022 \n\004code\030\002 \002(\0162\022."
    "ZPMeta.StatusCode\022\013\n\003msg\030\003 \001(\t\022*\n\004ping\030\004"
    " \001(\0132\034.ZPMeta.MetaCmdResponse.Ping\022*\n\004pu"
    "ll\030\005 \001(\0132\034.ZPMeta.MetaCmdResponse.Pull\0225"
    "\n\nlist_table\030\006 \001(\0132!.ZPMeta.MetaCmdRespo"
    "nse.ListTable\0223\n\tlist_node\030\007 \001(\0132 .ZPMet"
    "a.MetaCmdResponse.ListNode\0223\n\tlist_meta\030"
    "\010 \001(\0132 .ZPMeta.MetaCmdResponse.ListMeta\032"
    "\027\n\004Ping\022\017\n\007version\030\001 \002(\005\0324\n\004Pull\022\017\n\007vers"
    "ion\030\001 \002(\005\022\033\n\004info\030\002 \003(\0132\r.ZPMeta.Table\032."
    "\n\tListTable\022!\n\006tables\030\001 \001(\0132\021.ZPMeta.Tab"
    "leName\032(\n\010ListNode\022\034\n\005nodes\030\001 \001(\0132\r.ZPMe"
    "ta.Nodes\032,\n\010ListMeta\022 \n\005nodes\030\001 \002(\0132\021.ZP"
    "Meta.MetaNodes*-\n\nStatusCode\022\006\n\002OK\020\000\022\014\n\010"
    "NOTFOUND\020\001\022\t\n\005ERROR\020\002*\214\001\n\004Type\022\010\n\004PING\020\001"
    "\022\010\n\004PULL\020\002\022\010\n\004INIT\020\003\022\r\n\tSETMASTER\020\004\022\014\n\010A"
    "DDSLAVE\020\005\022\017\n\013REMOVESLAVE\020\006\022\r\n\tLISTTABLE\020"
    "\007\022\014\n\010LISTNODE\020\010\022\014\n\010LISTMETA\020\t\022\r\n\tDROPTAB"
    "LE\020\n*\037\n\006PState\022\n\n\006ACTIVE\020\001\022\t\n\005STUCK\020\002", 2077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zp_meta.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  NodeStatus::default_instance_ = new NodeStatus();
  Nodes::default_instance_ = new Nodes();
  MetaNodes::default_instance_ = new MetaNodes();
  Partitions::default_instance_ = new Partitions();
  TableName::default_instance_ = new TableName();
  Table::default_instance_ = new Table();
  BasicCmdUnit::default_instance_ = new BasicCmdUnit();
  SyncOffset::default_instance_ = new SyncOffset();
  MetaCmd::default_instance_ = new MetaCmd();
  MetaCmd_Ping::default_instance_ = new MetaCmd_Ping();
  MetaCmd_Pull::default_instance_ = new MetaCmd_Pull();
  MetaCmd_Init::default_instance_ = new MetaCmd_Init();
  MetaCmd_SetMaster::default_instance_ = new MetaCmd_SetMaster();
  MetaCmd_AddSlave::default_instance_ = new MetaCmd_AddSlave();
  MetaCmd_RemoveSlave::default_instance_ = new MetaCmd_RemoveSlave();
  MetaCmd_DropTable::default_instance_ = new MetaCmd_DropTable();
  MetaCmdResponse::default_instance_ = new MetaCmdResponse();
  MetaCmdResponse_Ping::default_instance_ = new MetaCmdResponse_Ping();
  MetaCmdResponse_Pull::default_instance_ = new MetaCmdResponse_Pull();
  MetaCmdResponse_ListTable::default_instance_ = new MetaCmdResponse_ListTable();
  MetaCmdResponse_ListNode::default_instance_ = new MetaCmdResponse_ListNode();
  MetaCmdResponse_ListMeta::default_instance_ = new MetaCmdResponse_ListMeta();
  Node::default_instance_->InitAsDefaultInstance();
  NodeStatus::default_instance_->InitAsDefaultInstance();
  Nodes::default_instance_->InitAsDefaultInstance();
  MetaNodes::default_instance_->InitAsDefaultInstance();
  Partitions::default_instance_->InitAsDefaultInstance();
  TableName::default_instance_->InitAsDefaultInstance();
  Table::default_instance_->InitAsDefaultInstance();
  BasicCmdUnit::default_instance_->InitAsDefaultInstance();
  SyncOffset::default_instance_->InitAsDefaultInstance();
  MetaCmd::default_instance_->InitAsDefaultInstance();
  MetaCmd_Ping::default_instance_->InitAsDefaultInstance();
  MetaCmd_Pull::default_instance_->InitAsDefaultInstance();
  MetaCmd_Init::default_instance_->InitAsDefaultInstance();
  MetaCmd_SetMaster::default_instance_->InitAsDefaultInstance();
  MetaCmd_AddSlave::default_instance_->InitAsDefaultInstance();
  MetaCmd_RemoveSlave::default_instance_->InitAsDefaultInstance();
  MetaCmd_DropTable::default_instance_->InitAsDefaultInstance();
  MetaCmdResponse::default_instance_->InitAsDefaultInstance();
  MetaCmdResponse_Ping::default_instance_->InitAsDefaultInstance();
  MetaCmdResponse_Pull::default_instance_->InitAsDefaultInstance();
  MetaCmdResponse_ListTable::default_instance_->InitAsDefaultInstance();
  MetaCmdResponse_ListNode::default_instance_->InitAsDefaultInstance();
  MetaCmdResponse_ListMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zp_5fmeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zp_5fmeta_2eproto {
  StaticDescriptorInitializer_zp_5fmeta_2eproto() {
    protobuf_AddDesc_zp_5fmeta_2eproto();
  }
} static_descriptor_initializer_zp_5fmeta_2eproto_;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCode_descriptor_;
}
bool StatusCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PState_descriptor_;
}
bool PState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kIpFieldNumber;
const int Node::kPortFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStatus::kNodeFieldNumber;
const int NodeStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

NodeStatus::NodeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStatus::InitAsDefaultInstance() {
  node_ = const_cast< ::ZPMeta::Node*>(&::ZPMeta::Node::default_instance());
}

NodeStatus::NodeStatus(const NodeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStatus::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStatus::~NodeStatus() {
  SharedDtor();
}

void NodeStatus::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void NodeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatus_descriptor_;
}

const NodeStatus& NodeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

NodeStatus* NodeStatus::default_instance_ = NULL;

NodeStatus* NodeStatus::New() const {
  return new NodeStatus;
}

void NodeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::ZPMeta::Node::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.Node node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.Node node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.Node node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.Node node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStatus::MergeFrom(const NodeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::ZPMeta::Node::MergeFrom(from.node());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void NodeStatus::Swap(NodeStatus* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStatus_descriptor_;
  metadata.reflection = NodeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Nodes::kNodesFieldNumber;
#endif  // !_MSC_VER

Nodes::Nodes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Nodes::InitAsDefaultInstance() {
}

Nodes::Nodes(const Nodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Nodes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Nodes::~Nodes() {
  SharedDtor();
}

void Nodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Nodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nodes_descriptor_;
}

const Nodes& Nodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

Nodes* Nodes::default_instance_ = NULL;

Nodes* Nodes::New() const {
  return new Nodes;
}

void Nodes::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Nodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZPMeta.NodeStatus nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Nodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ZPMeta.NodeStatus nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Nodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ZPMeta.NodeStatus nodes = 1;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Nodes::ByteSize() const {
  int total_size = 0;

  // repeated .ZPMeta.NodeStatus nodes = 1;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Nodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Nodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Nodes::MergeFrom(const Nodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Nodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nodes::CopyFrom(const Nodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nodes::IsInitialized() const {

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void Nodes::Swap(Nodes* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Nodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nodes_descriptor_;
  metadata.reflection = Nodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaNodes::kFollowersFieldNumber;
const int MetaNodes::kLeaderFieldNumber;
#endif  // !_MSC_VER

MetaNodes::MetaNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaNodes::InitAsDefaultInstance() {
  leader_ = const_cast< ::ZPMeta::Node*>(&::ZPMeta::Node::default_instance());
}

MetaNodes::MetaNodes(const MetaNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaNodes::SharedCtor() {
  _cached_size_ = 0;
  leader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaNodes::~MetaNodes() {
  SharedDtor();
}

void MetaNodes::SharedDtor() {
  if (this != default_instance_) {
    delete leader_;
  }
}

void MetaNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaNodes_descriptor_;
}

const MetaNodes& MetaNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaNodes* MetaNodes::default_instance_ = NULL;

MetaNodes* MetaNodes::New() const {
  return new MetaNodes;
}

void MetaNodes::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_leader()) {
      if (leader_ != NULL) leader_->::ZPMeta::Node::Clear();
    }
  }
  followers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZPMeta.Node followers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_followers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_followers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_followers;
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .ZPMeta.Node leader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ZPMeta.Node followers = 1;
  for (int i = 0; i < this->followers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->followers(i), output);
  }

  // optional .ZPMeta.Node leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ZPMeta.Node followers = 1;
  for (int i = 0; i < this->followers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->followers(i), target);
  }

  // optional .ZPMeta.Node leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaNodes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ZPMeta.Node leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader());
    }

  }
  // repeated .ZPMeta.Node followers = 1;
  total_size += 1 * this->followers_size();
  for (int i = 0; i < this->followers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->followers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaNodes::MergeFrom(const MetaNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  followers_.MergeFrom(from.followers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_leader()) {
      mutable_leader()->::ZPMeta::Node::MergeFrom(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaNodes::CopyFrom(const MetaNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaNodes::IsInitialized() const {

  for (int i = 0; i < followers_size(); i++) {
    if (!this->followers(i).IsInitialized()) return false;
  }
  if (has_leader()) {
    if (!this->leader().IsInitialized()) return false;
  }
  return true;
}

void MetaNodes::Swap(MetaNodes* other) {
  if (other != this) {
    followers_.Swap(&other->followers_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaNodes_descriptor_;
  metadata.reflection = MetaNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Partitions::kIdFieldNumber;
const int Partitions::kStateFieldNumber;
const int Partitions::kMasterFieldNumber;
const int Partitions::kSlavesFieldNumber;
#endif  // !_MSC_VER

Partitions::Partitions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Partitions::InitAsDefaultInstance() {
  master_ = const_cast< ::ZPMeta::Node*>(&::ZPMeta::Node::default_instance());
}

Partitions::Partitions(const Partitions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Partitions::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 1;
  master_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Partitions::~Partitions() {
  SharedDtor();
}

void Partitions::SharedDtor() {
  if (this != default_instance_) {
    delete master_;
  }
}

void Partitions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Partitions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Partitions_descriptor_;
}

const Partitions& Partitions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

Partitions* Partitions::default_instance_ = NULL;

Partitions* Partitions::New() const {
  return new Partitions;
}

void Partitions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 1;
    if (has_master()) {
      if (master_ != NULL) master_->::ZPMeta::Node::Clear();
    }
  }
  slaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Partitions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .ZPMeta.PState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZPMeta::PState_IsValid(value)) {
            set_state(static_cast< ::ZPMeta::PState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_master;
        break;
      }

      // required .ZPMeta.Node master = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slaves;
        break;
      }

      // repeated .ZPMeta.Node slaves = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Partitions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ZPMeta.PState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required .ZPMeta.Node master = 3;
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->master(), output);
  }

  // repeated .ZPMeta.Node slaves = 4;
  for (int i = 0; i < this->slaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Partitions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ZPMeta.PState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required .ZPMeta.Node master = 3;
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->master(), target);
  }

  // repeated .ZPMeta.Node slaves = 4;
  for (int i = 0; i < this->slaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->slaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Partitions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .ZPMeta.PState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required .ZPMeta.Node master = 3;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master());
    }

  }
  // repeated .ZPMeta.Node slaves = 4;
  total_size += 1 * this->slaves_size();
  for (int i = 0; i < this->slaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Partitions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Partitions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Partitions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Partitions::MergeFrom(const Partitions& from) {
  GOOGLE_CHECK_NE(&from, this);
  slaves_.MergeFrom(from.slaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_master()) {
      mutable_master()->::ZPMeta::Node::MergeFrom(from.master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Partitions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partitions::CopyFrom(const Partitions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partitions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_master()) {
    if (!this->master().IsInitialized()) return false;
  }
  for (int i = 0; i < slaves_size(); i++) {
    if (!this->slaves(i).IsInitialized()) return false;
  }
  return true;
}

void Partitions::Swap(Partitions* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(master_, other->master_);
    slaves_.Swap(&other->slaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Partitions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Partitions_descriptor_;
  metadata.reflection = Partitions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableName::kNameFieldNumber;
#endif  // !_MSC_VER

TableName::TableName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableName::InitAsDefaultInstance() {
}

TableName::TableName(const TableName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableName::~TableName() {
  SharedDtor();
}

void TableName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableName_descriptor_;
}

const TableName& TableName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

TableName* TableName::default_instance_ = NULL;

TableName* TableName::New() const {
  return new TableName;
}

void TableName::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableName::ByteSize() const {
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableName::MergeFrom(const TableName& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableName::CopyFrom(const TableName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableName::IsInitialized() const {

  return true;
}

void TableName::Swap(TableName* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableName_descriptor_;
  metadata.reflection = TableName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Table::kNameFieldNumber;
const int Table::kPartitionsFieldNumber;
#endif  // !_MSC_VER

Table::Table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Table::InitAsDefaultInstance() {
}

Table::Table(const Table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Table::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table::~Table() {
  SharedDtor();
}

void Table::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_descriptor_;
}

const Table& Table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

Table* Table::default_instance_ = NULL;

Table* Table::New() const {
  return new Table;
}

void Table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        break;
      }

      // repeated .ZPMeta.Partitions partitions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_partitions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .ZPMeta.Partitions partitions = 2;
  for (int i = 0; i < this->partitions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->partitions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .ZPMeta.Partitions partitions = 2;
  for (int i = 0; i < this->partitions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->partitions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .ZPMeta.Partitions partitions = 2;
  total_size += 1 * this->partitions_size();
  for (int i = 0; i < this->partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partitions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
  GOOGLE_CHECK_NE(&from, this);
  partitions_.MergeFrom(from.partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < partitions_size(); i++) {
    if (!this->partitions(i).IsInitialized()) return false;
  }
  return true;
}

void Table::Swap(Table* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    partitions_.Swap(&other->partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_descriptor_;
  metadata.reflection = Table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BasicCmdUnit::kNameFieldNumber;
const int BasicCmdUnit::kPartitionFieldNumber;
const int BasicCmdUnit::kNodeFieldNumber;
#endif  // !_MSC_VER

BasicCmdUnit::BasicCmdUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicCmdUnit::InitAsDefaultInstance() {
  node_ = const_cast< ::ZPMeta::Node*>(&::ZPMeta::Node::default_instance());
}

BasicCmdUnit::BasicCmdUnit(const BasicCmdUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicCmdUnit::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partition_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicCmdUnit::~BasicCmdUnit() {
  SharedDtor();
}

void BasicCmdUnit::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete node_;
  }
}

void BasicCmdUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicCmdUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicCmdUnit_descriptor_;
}

const BasicCmdUnit& BasicCmdUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

BasicCmdUnit* BasicCmdUnit::default_instance_ = NULL;

BasicCmdUnit* BasicCmdUnit::New() const {
  return new BasicCmdUnit;
}

void BasicCmdUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    partition_ = 0;
    if (has_node()) {
      if (node_ != NULL) node_->::ZPMeta::Node::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicCmdUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_partition;
        break;
      }

      // required int32 partition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node;
        break;
      }

      // required .ZPMeta.Node node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicCmdUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 partition = 2;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->partition(), output);
  }

  // required .ZPMeta.Node node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicCmdUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 partition = 2;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->partition(), target);
  }

  // required .ZPMeta.Node node = 3;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicCmdUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 partition = 2;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition());
    }

    // required .ZPMeta.Node node = 3;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicCmdUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicCmdUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicCmdUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicCmdUnit::MergeFrom(const BasicCmdUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_node()) {
      mutable_node()->::ZPMeta::Node::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicCmdUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicCmdUnit::CopyFrom(const BasicCmdUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicCmdUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void BasicCmdUnit::Swap(BasicCmdUnit* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(partition_, other->partition_);
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicCmdUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicCmdUnit_descriptor_;
  metadata.reflection = BasicCmdUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncOffset::kTableNameFieldNumber;
const int SyncOffset::kPartitionFieldNumber;
const int SyncOffset::kFilenumFieldNumber;
const int SyncOffset::kOffsetFieldNumber;
#endif  // !_MSC_VER

SyncOffset::SyncOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncOffset::InitAsDefaultInstance() {
}

SyncOffset::SyncOffset(const SyncOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncOffset::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partition_ = 0;
  filenum_ = 0;
  offset_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncOffset::~SyncOffset() {
  SharedDtor();
}

void SyncOffset::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void SyncOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncOffset_descriptor_;
}

const SyncOffset& SyncOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

SyncOffset* SyncOffset::default_instance_ = NULL;

SyncOffset* SyncOffset::New() const {
  return new SyncOffset;
}

void SyncOffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    partition_ = 0;
    filenum_ = 0;
    offset_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_partition;
        break;
      }

      // required int32 partition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filenum;
        break;
      }

      // optional int32 filenum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filenum_)));
          set_has_filenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int64 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required int32 partition = 2;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->partition(), output);
  }

  // optional int32 filenum = 3;
  if (has_filenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->filenum(), output);
  }

  // optional int64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required int32 partition = 2;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->partition(), target);
  }

  // optional int32 filenum = 3;
  if (has_filenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->filenum(), target);
  }

  // optional int64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncOffset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required int32 partition = 2;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition());
    }

    // optional int32 filenum = 3;
    if (has_filenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filenum());
    }

    // optional int64 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncOffset::MergeFrom(const SyncOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_filenum()) {
      set_filenum(from.filenum());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncOffset::CopyFrom(const SyncOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncOffset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SyncOffset::Swap(SyncOffset* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(partition_, other->partition_);
    std::swap(filenum_, other->filenum_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncOffset_descriptor_;
  metadata.reflection = SyncOffset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaCmd_Ping::kVersionFieldNumber;
const int MetaCmd_Ping::kNodeFieldNumber;
const int MetaCmd_Ping::kOffsetFieldNumber;
#endif  // !_MSC_VER

MetaCmd_Ping::MetaCmd_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_Ping::InitAsDefaultInstance() {
  node_ = const_cast< ::ZPMeta::Node*>(&::ZPMeta::Node::default_instance());
}

MetaCmd_Ping::MetaCmd_Ping(const MetaCmd_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_Ping::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_Ping::~MetaCmd_Ping() {
  SharedDtor();
}

void MetaCmd_Ping::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void MetaCmd_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_Ping_descriptor_;
}

const MetaCmd_Ping& MetaCmd_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_Ping* MetaCmd_Ping::default_instance_ = NULL;

MetaCmd_Ping* MetaCmd_Ping::New() const {
  return new MetaCmd_Ping;
}

void MetaCmd_Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (has_node()) {
      if (node_ != NULL) node_->::ZPMeta::Node::Clear();
    }
  }
  offset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // required .ZPMeta.Node node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offset;
        break;
      }

      // repeated .ZPMeta.SyncOffset offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_offset;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required .ZPMeta.Node node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node(), output);
  }

  // repeated .ZPMeta.SyncOffset offset = 3;
  for (int i = 0; i < this->offset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offset(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required .ZPMeta.Node node = 2;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node(), target);
  }

  // repeated .ZPMeta.SyncOffset offset = 3;
  for (int i = 0; i < this->offset_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offset(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // required .ZPMeta.Node node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

  }
  // repeated .ZPMeta.SyncOffset offset = 3;
  total_size += 1 * this->offset_size();
  for (int i = 0; i < this->offset_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offset(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_Ping::MergeFrom(const MetaCmd_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  offset_.MergeFrom(from.offset_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_node()) {
      mutable_node()->::ZPMeta::Node::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_Ping::CopyFrom(const MetaCmd_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  for (int i = 0; i < offset_size(); i++) {
    if (!this->offset(i).IsInitialized()) return false;
  }
  return true;
}

void MetaCmd_Ping::Swap(MetaCmd_Ping* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(node_, other->node_);
    offset_.Swap(&other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_Ping_descriptor_;
  metadata.reflection = MetaCmd_Ping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd_Pull::kNodeFieldNumber;
const int MetaCmd_Pull::kNameFieldNumber;
#endif  // !_MSC_VER

MetaCmd_Pull::MetaCmd_Pull()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_Pull::InitAsDefaultInstance() {
  node_ = const_cast< ::ZPMeta::Node*>(&::ZPMeta::Node::default_instance());
}

MetaCmd_Pull::MetaCmd_Pull(const MetaCmd_Pull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_Pull::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_Pull::~MetaCmd_Pull() {
  SharedDtor();
}

void MetaCmd_Pull::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete node_;
  }
}

void MetaCmd_Pull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_Pull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_Pull_descriptor_;
}

const MetaCmd_Pull& MetaCmd_Pull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_Pull* MetaCmd_Pull::default_instance_ = NULL;

MetaCmd_Pull* MetaCmd_Pull::New() const {
  return new MetaCmd_Pull;
}

void MetaCmd_Pull::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::ZPMeta::Node::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_Pull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ZPMeta.Node node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_Pull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ZPMeta.Node node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_Pull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ZPMeta.Node node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_Pull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ZPMeta.Node node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_Pull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_Pull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_Pull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_Pull::MergeFrom(const MetaCmd_Pull& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::ZPMeta::Node::MergeFrom(from.node());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_Pull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_Pull::CopyFrom(const MetaCmd_Pull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_Pull::IsInitialized() const {

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void MetaCmd_Pull::Swap(MetaCmd_Pull* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_Pull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_Pull_descriptor_;
  metadata.reflection = MetaCmd_Pull_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd_Init::kNameFieldNumber;
const int MetaCmd_Init::kNumFieldNumber;
#endif  // !_MSC_VER

MetaCmd_Init::MetaCmd_Init()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_Init::InitAsDefaultInstance() {
}

MetaCmd_Init::MetaCmd_Init(const MetaCmd_Init& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_Init::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_Init::~MetaCmd_Init() {
  SharedDtor();
}

void MetaCmd_Init::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MetaCmd_Init::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_Init::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_Init_descriptor_;
}

const MetaCmd_Init& MetaCmd_Init::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_Init* MetaCmd_Init::default_instance_ = NULL;

MetaCmd_Init* MetaCmd_Init::New() const {
  return new MetaCmd_Init;
}

void MetaCmd_Init::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_Init::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_Init::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_Init::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_Init::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_Init::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_Init* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_Init*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_Init::MergeFrom(const MetaCmd_Init& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_Init::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_Init::CopyFrom(const MetaCmd_Init& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_Init::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MetaCmd_Init::Swap(MetaCmd_Init* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_Init::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_Init_descriptor_;
  metadata.reflection = MetaCmd_Init_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd_SetMaster::kBasicFieldNumber;
#endif  // !_MSC_VER

MetaCmd_SetMaster::MetaCmd_SetMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_SetMaster::InitAsDefaultInstance() {
  basic_ = const_cast< ::ZPMeta::BasicCmdUnit*>(&::ZPMeta::BasicCmdUnit::default_instance());
}

MetaCmd_SetMaster::MetaCmd_SetMaster(const MetaCmd_SetMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_SetMaster::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_SetMaster::~MetaCmd_SetMaster() {
  SharedDtor();
}

void MetaCmd_SetMaster::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void MetaCmd_SetMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_SetMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_SetMaster_descriptor_;
}

const MetaCmd_SetMaster& MetaCmd_SetMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_SetMaster* MetaCmd_SetMaster::default_instance_ = NULL;

MetaCmd_SetMaster* MetaCmd_SetMaster::New() const {
  return new MetaCmd_SetMaster;
}

void MetaCmd_SetMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ZPMeta::BasicCmdUnit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_SetMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.BasicCmdUnit basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_SetMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.BasicCmdUnit basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_SetMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.BasicCmdUnit basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_SetMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.BasicCmdUnit basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_SetMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_SetMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_SetMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_SetMaster::MergeFrom(const MetaCmd_SetMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ZPMeta::BasicCmdUnit::MergeFrom(from.basic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_SetMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_SetMaster::CopyFrom(const MetaCmd_SetMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_SetMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  return true;
}

void MetaCmd_SetMaster::Swap(MetaCmd_SetMaster* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_SetMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_SetMaster_descriptor_;
  metadata.reflection = MetaCmd_SetMaster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd_AddSlave::kBasicFieldNumber;
#endif  // !_MSC_VER

MetaCmd_AddSlave::MetaCmd_AddSlave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_AddSlave::InitAsDefaultInstance() {
  basic_ = const_cast< ::ZPMeta::BasicCmdUnit*>(&::ZPMeta::BasicCmdUnit::default_instance());
}

MetaCmd_AddSlave::MetaCmd_AddSlave(const MetaCmd_AddSlave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_AddSlave::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_AddSlave::~MetaCmd_AddSlave() {
  SharedDtor();
}

void MetaCmd_AddSlave::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void MetaCmd_AddSlave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_AddSlave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_AddSlave_descriptor_;
}

const MetaCmd_AddSlave& MetaCmd_AddSlave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_AddSlave* MetaCmd_AddSlave::default_instance_ = NULL;

MetaCmd_AddSlave* MetaCmd_AddSlave::New() const {
  return new MetaCmd_AddSlave;
}

void MetaCmd_AddSlave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ZPMeta::BasicCmdUnit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_AddSlave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.BasicCmdUnit basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_AddSlave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.BasicCmdUnit basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_AddSlave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.BasicCmdUnit basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_AddSlave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.BasicCmdUnit basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_AddSlave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_AddSlave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_AddSlave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_AddSlave::MergeFrom(const MetaCmd_AddSlave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ZPMeta::BasicCmdUnit::MergeFrom(from.basic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_AddSlave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_AddSlave::CopyFrom(const MetaCmd_AddSlave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_AddSlave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  return true;
}

void MetaCmd_AddSlave::Swap(MetaCmd_AddSlave* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_AddSlave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_AddSlave_descriptor_;
  metadata.reflection = MetaCmd_AddSlave_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd_RemoveSlave::kBasicFieldNumber;
#endif  // !_MSC_VER

MetaCmd_RemoveSlave::MetaCmd_RemoveSlave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_RemoveSlave::InitAsDefaultInstance() {
  basic_ = const_cast< ::ZPMeta::BasicCmdUnit*>(&::ZPMeta::BasicCmdUnit::default_instance());
}

MetaCmd_RemoveSlave::MetaCmd_RemoveSlave(const MetaCmd_RemoveSlave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_RemoveSlave::SharedCtor() {
  _cached_size_ = 0;
  basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_RemoveSlave::~MetaCmd_RemoveSlave() {
  SharedDtor();
}

void MetaCmd_RemoveSlave::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void MetaCmd_RemoveSlave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_RemoveSlave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_RemoveSlave_descriptor_;
}

const MetaCmd_RemoveSlave& MetaCmd_RemoveSlave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_RemoveSlave* MetaCmd_RemoveSlave::default_instance_ = NULL;

MetaCmd_RemoveSlave* MetaCmd_RemoveSlave::New() const {
  return new MetaCmd_RemoveSlave;
}

void MetaCmd_RemoveSlave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic()) {
      if (basic_ != NULL) basic_->::ZPMeta::BasicCmdUnit::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_RemoveSlave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.BasicCmdUnit basic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_RemoveSlave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.BasicCmdUnit basic = 1;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_RemoveSlave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.BasicCmdUnit basic = 1;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_RemoveSlave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.BasicCmdUnit basic = 1;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_RemoveSlave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_RemoveSlave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_RemoveSlave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_RemoveSlave::MergeFrom(const MetaCmd_RemoveSlave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic()) {
      mutable_basic()->::ZPMeta::BasicCmdUnit::MergeFrom(from.basic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_RemoveSlave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_RemoveSlave::CopyFrom(const MetaCmd_RemoveSlave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_RemoveSlave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basic()) {
    if (!this->basic().IsInitialized()) return false;
  }
  return true;
}

void MetaCmd_RemoveSlave::Swap(MetaCmd_RemoveSlave* other) {
  if (other != this) {
    std::swap(basic_, other->basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_RemoveSlave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_RemoveSlave_descriptor_;
  metadata.reflection = MetaCmd_RemoveSlave_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd_DropTable::kNameFieldNumber;
#endif  // !_MSC_VER

MetaCmd_DropTable::MetaCmd_DropTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd_DropTable::InitAsDefaultInstance() {
}

MetaCmd_DropTable::MetaCmd_DropTable(const MetaCmd_DropTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd_DropTable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd_DropTable::~MetaCmd_DropTable() {
  SharedDtor();
}

void MetaCmd_DropTable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MetaCmd_DropTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd_DropTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_DropTable_descriptor_;
}

const MetaCmd_DropTable& MetaCmd_DropTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd_DropTable* MetaCmd_DropTable::default_instance_ = NULL;

MetaCmd_DropTable* MetaCmd_DropTable::New() const {
  return new MetaCmd_DropTable;
}

void MetaCmd_DropTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd_DropTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd_DropTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd_DropTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd_DropTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd_DropTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd_DropTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd_DropTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd_DropTable::MergeFrom(const MetaCmd_DropTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd_DropTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd_DropTable::CopyFrom(const MetaCmd_DropTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd_DropTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MetaCmd_DropTable::Swap(MetaCmd_DropTable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd_DropTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_DropTable_descriptor_;
  metadata.reflection = MetaCmd_DropTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmd::kTypeFieldNumber;
const int MetaCmd::kPingFieldNumber;
const int MetaCmd::kPullFieldNumber;
const int MetaCmd::kInitFieldNumber;
const int MetaCmd::kSetMasterFieldNumber;
const int MetaCmd::kAddSlaveFieldNumber;
const int MetaCmd::kRemoveSlaveFieldNumber;
const int MetaCmd::kDropTableFieldNumber;
#endif  // !_MSC_VER

MetaCmd::MetaCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmd::InitAsDefaultInstance() {
  ping_ = const_cast< ::ZPMeta::MetaCmd_Ping*>(&::ZPMeta::MetaCmd_Ping::default_instance());
  pull_ = const_cast< ::ZPMeta::MetaCmd_Pull*>(&::ZPMeta::MetaCmd_Pull::default_instance());
  init_ = const_cast< ::ZPMeta::MetaCmd_Init*>(&::ZPMeta::MetaCmd_Init::default_instance());
  set_master_ = const_cast< ::ZPMeta::MetaCmd_SetMaster*>(&::ZPMeta::MetaCmd_SetMaster::default_instance());
  add_slave_ = const_cast< ::ZPMeta::MetaCmd_AddSlave*>(&::ZPMeta::MetaCmd_AddSlave::default_instance());
  remove_slave_ = const_cast< ::ZPMeta::MetaCmd_RemoveSlave*>(&::ZPMeta::MetaCmd_RemoveSlave::default_instance());
  drop_table_ = const_cast< ::ZPMeta::MetaCmd_DropTable*>(&::ZPMeta::MetaCmd_DropTable::default_instance());
}

MetaCmd::MetaCmd(const MetaCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ping_ = NULL;
  pull_ = NULL;
  init_ = NULL;
  set_master_ = NULL;
  add_slave_ = NULL;
  remove_slave_ = NULL;
  drop_table_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmd::~MetaCmd() {
  SharedDtor();
}

void MetaCmd::SharedDtor() {
  if (this != default_instance_) {
    delete ping_;
    delete pull_;
    delete init_;
    delete set_master_;
    delete add_slave_;
    delete remove_slave_;
    delete drop_table_;
  }
}

void MetaCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmd_descriptor_;
}

const MetaCmd& MetaCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmd* MetaCmd::default_instance_ = NULL;

MetaCmd* MetaCmd::New() const {
  return new MetaCmd;
}

void MetaCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_ping()) {
      if (ping_ != NULL) ping_->::ZPMeta::MetaCmd_Ping::Clear();
    }
    if (has_pull()) {
      if (pull_ != NULL) pull_->::ZPMeta::MetaCmd_Pull::Clear();
    }
    if (has_init()) {
      if (init_ != NULL) init_->::ZPMeta::MetaCmd_Init::Clear();
    }
    if (has_set_master()) {
      if (set_master_ != NULL) set_master_->::ZPMeta::MetaCmd_SetMaster::Clear();
    }
    if (has_add_slave()) {
      if (add_slave_ != NULL) add_slave_->::ZPMeta::MetaCmd_AddSlave::Clear();
    }
    if (has_remove_slave()) {
      if (remove_slave_ != NULL) remove_slave_->::ZPMeta::MetaCmd_RemoveSlave::Clear();
    }
    if (has_drop_table()) {
      if (drop_table_ != NULL) drop_table_->::ZPMeta::MetaCmd_DropTable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZPMeta::Type_IsValid(value)) {
            set_type(static_cast< ::ZPMeta::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ping;
        break;
      }

      // optional .ZPMeta.MetaCmd.Ping ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pull;
        break;
      }

      // optional .ZPMeta.MetaCmd.Pull pull = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pull:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_init;
        break;
      }

      // optional .ZPMeta.MetaCmd.Init init = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_set_master;
        break;
      }

      // optional .ZPMeta.MetaCmd.SetMaster set_master = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_master()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_add_slave;
        break;
      }

      // optional .ZPMeta.MetaCmd.AddSlave add_slave = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_slave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_slave()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_remove_slave;
        break;
      }

      // optional .ZPMeta.MetaCmd.RemoveSlave remove_slave = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_slave:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_slave()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_drop_table;
        break;
      }

      // optional .ZPMeta.MetaCmd.DropTable drop_table = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ZPMeta.MetaCmd.Ping ping = 2;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ping(), output);
  }

  // optional .ZPMeta.MetaCmd.Pull pull = 3;
  if (has_pull()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pull(), output);
  }

  // optional .ZPMeta.MetaCmd.Init init = 4;
  if (has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->init(), output);
  }

  // optional .ZPMeta.MetaCmd.SetMaster set_master = 5;
  if (has_set_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->set_master(), output);
  }

  // optional .ZPMeta.MetaCmd.AddSlave add_slave = 6;
  if (has_add_slave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->add_slave(), output);
  }

  // optional .ZPMeta.MetaCmd.RemoveSlave remove_slave = 7;
  if (has_remove_slave()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->remove_slave(), output);
  }

  // optional .ZPMeta.MetaCmd.DropTable drop_table = 8;
  if (has_drop_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->drop_table(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ZPMeta.MetaCmd.Ping ping = 2;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ping(), target);
  }

  // optional .ZPMeta.MetaCmd.Pull pull = 3;
  if (has_pull()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pull(), target);
  }

  // optional .ZPMeta.MetaCmd.Init init = 4;
  if (has_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->init(), target);
  }

  // optional .ZPMeta.MetaCmd.SetMaster set_master = 5;
  if (has_set_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->set_master(), target);
  }

  // optional .ZPMeta.MetaCmd.AddSlave add_slave = 6;
  if (has_add_slave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->add_slave(), target);
  }

  // optional .ZPMeta.MetaCmd.RemoveSlave remove_slave = 7;
  if (has_remove_slave()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->remove_slave(), target);
  }

  // optional .ZPMeta.MetaCmd.DropTable drop_table = 8;
  if (has_drop_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->drop_table(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .ZPMeta.MetaCmd.Ping ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }

    // optional .ZPMeta.MetaCmd.Pull pull = 3;
    if (has_pull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pull());
    }

    // optional .ZPMeta.MetaCmd.Init init = 4;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init());
    }

    // optional .ZPMeta.MetaCmd.SetMaster set_master = 5;
    if (has_set_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_master());
    }

    // optional .ZPMeta.MetaCmd.AddSlave add_slave = 6;
    if (has_add_slave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_slave());
    }

    // optional .ZPMeta.MetaCmd.RemoveSlave remove_slave = 7;
    if (has_remove_slave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_slave());
    }

    // optional .ZPMeta.MetaCmd.DropTable drop_table = 8;
    if (has_drop_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drop_table());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmd::MergeFrom(const MetaCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ping()) {
      mutable_ping()->::ZPMeta::MetaCmd_Ping::MergeFrom(from.ping());
    }
    if (from.has_pull()) {
      mutable_pull()->::ZPMeta::MetaCmd_Pull::MergeFrom(from.pull());
    }
    if (from.has_init()) {
      mutable_init()->::ZPMeta::MetaCmd_Init::MergeFrom(from.init());
    }
    if (from.has_set_master()) {
      mutable_set_master()->::ZPMeta::MetaCmd_SetMaster::MergeFrom(from.set_master());
    }
    if (from.has_add_slave()) {
      mutable_add_slave()->::ZPMeta::MetaCmd_AddSlave::MergeFrom(from.add_slave());
    }
    if (from.has_remove_slave()) {
      mutable_remove_slave()->::ZPMeta::MetaCmd_RemoveSlave::MergeFrom(from.remove_slave());
    }
    if (from.has_drop_table()) {
      mutable_drop_table()->::ZPMeta::MetaCmd_DropTable::MergeFrom(from.drop_table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmd::CopyFrom(const MetaCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pull()) {
    if (!this->pull().IsInitialized()) return false;
  }
  if (has_init()) {
    if (!this->init().IsInitialized()) return false;
  }
  if (has_set_master()) {
    if (!this->set_master().IsInitialized()) return false;
  }
  if (has_add_slave()) {
    if (!this->add_slave().IsInitialized()) return false;
  }
  if (has_remove_slave()) {
    if (!this->remove_slave().IsInitialized()) return false;
  }
  if (has_drop_table()) {
    if (!this->drop_table().IsInitialized()) return false;
  }
  return true;
}

void MetaCmd::Swap(MetaCmd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ping_, other->ping_);
    std::swap(pull_, other->pull_);
    std::swap(init_, other->init_);
    std::swap(set_master_, other->set_master_);
    std::swap(add_slave_, other->add_slave_);
    std::swap(remove_slave_, other->remove_slave_);
    std::swap(drop_table_, other->drop_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmd_descriptor_;
  metadata.reflection = MetaCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaCmdResponse_Ping::kVersionFieldNumber;
#endif  // !_MSC_VER

MetaCmdResponse_Ping::MetaCmdResponse_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmdResponse_Ping::InitAsDefaultInstance() {
}

MetaCmdResponse_Ping::MetaCmdResponse_Ping(const MetaCmdResponse_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmdResponse_Ping::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmdResponse_Ping::~MetaCmdResponse_Ping() {
  SharedDtor();
}

void MetaCmdResponse_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetaCmdResponse_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmdResponse_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmdResponse_Ping_descriptor_;
}

const MetaCmdResponse_Ping& MetaCmdResponse_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmdResponse_Ping* MetaCmdResponse_Ping::default_instance_ = NULL;

MetaCmdResponse_Ping* MetaCmdResponse_Ping::New() const {
  return new MetaCmdResponse_Ping;
}

void MetaCmdResponse_Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmdResponse_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmdResponse_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmdResponse_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmdResponse_Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmdResponse_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmdResponse_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmdResponse_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmdResponse_Ping::MergeFrom(const MetaCmdResponse_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmdResponse_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmdResponse_Ping::CopyFrom(const MetaCmdResponse_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmdResponse_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MetaCmdResponse_Ping::Swap(MetaCmdResponse_Ping* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmdResponse_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmdResponse_Ping_descriptor_;
  metadata.reflection = MetaCmdResponse_Ping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmdResponse_Pull::kVersionFieldNumber;
const int MetaCmdResponse_Pull::kInfoFieldNumber;
#endif  // !_MSC_VER

MetaCmdResponse_Pull::MetaCmdResponse_Pull()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmdResponse_Pull::InitAsDefaultInstance() {
}

MetaCmdResponse_Pull::MetaCmdResponse_Pull(const MetaCmdResponse_Pull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmdResponse_Pull::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmdResponse_Pull::~MetaCmdResponse_Pull() {
  SharedDtor();
}

void MetaCmdResponse_Pull::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetaCmdResponse_Pull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmdResponse_Pull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmdResponse_Pull_descriptor_;
}

const MetaCmdResponse_Pull& MetaCmdResponse_Pull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmdResponse_Pull* MetaCmdResponse_Pull::default_instance_ = NULL;

MetaCmdResponse_Pull* MetaCmdResponse_Pull::New() const {
  return new MetaCmdResponse_Pull;
}

void MetaCmdResponse_Pull::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmdResponse_Pull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ZPMeta.Table info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmdResponse_Pull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .ZPMeta.Table info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmdResponse_Pull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // repeated .ZPMeta.Table info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmdResponse_Pull::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  // repeated .ZPMeta.Table info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmdResponse_Pull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmdResponse_Pull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmdResponse_Pull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmdResponse_Pull::MergeFrom(const MetaCmdResponse_Pull& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmdResponse_Pull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmdResponse_Pull::CopyFrom(const MetaCmdResponse_Pull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmdResponse_Pull::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void MetaCmdResponse_Pull::Swap(MetaCmdResponse_Pull* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmdResponse_Pull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmdResponse_Pull_descriptor_;
  metadata.reflection = MetaCmdResponse_Pull_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmdResponse_ListTable::kTablesFieldNumber;
#endif  // !_MSC_VER

MetaCmdResponse_ListTable::MetaCmdResponse_ListTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmdResponse_ListTable::InitAsDefaultInstance() {
  tables_ = const_cast< ::ZPMeta::TableName*>(&::ZPMeta::TableName::default_instance());
}

MetaCmdResponse_ListTable::MetaCmdResponse_ListTable(const MetaCmdResponse_ListTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmdResponse_ListTable::SharedCtor() {
  _cached_size_ = 0;
  tables_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmdResponse_ListTable::~MetaCmdResponse_ListTable() {
  SharedDtor();
}

void MetaCmdResponse_ListTable::SharedDtor() {
  if (this != default_instance_) {
    delete tables_;
  }
}

void MetaCmdResponse_ListTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmdResponse_ListTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmdResponse_ListTable_descriptor_;
}

const MetaCmdResponse_ListTable& MetaCmdResponse_ListTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmdResponse_ListTable* MetaCmdResponse_ListTable::default_instance_ = NULL;

MetaCmdResponse_ListTable* MetaCmdResponse_ListTable::New() const {
  return new MetaCmdResponse_ListTable;
}

void MetaCmdResponse_ListTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tables()) {
      if (tables_ != NULL) tables_->::ZPMeta::TableName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmdResponse_ListTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ZPMeta.TableName tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmdResponse_ListTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ZPMeta.TableName tables = 1;
  if (has_tables()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmdResponse_ListTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ZPMeta.TableName tables = 1;
  if (has_tables()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tables(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmdResponse_ListTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ZPMeta.TableName tables = 1;
    if (has_tables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tables());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmdResponse_ListTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmdResponse_ListTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmdResponse_ListTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmdResponse_ListTable::MergeFrom(const MetaCmdResponse_ListTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tables()) {
      mutable_tables()->::ZPMeta::TableName::MergeFrom(from.tables());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmdResponse_ListTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmdResponse_ListTable::CopyFrom(const MetaCmdResponse_ListTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmdResponse_ListTable::IsInitialized() const {

  return true;
}

void MetaCmdResponse_ListTable::Swap(MetaCmdResponse_ListTable* other) {
  if (other != this) {
    std::swap(tables_, other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmdResponse_ListTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmdResponse_ListTable_descriptor_;
  metadata.reflection = MetaCmdResponse_ListTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmdResponse_ListNode::kNodesFieldNumber;
#endif  // !_MSC_VER

MetaCmdResponse_ListNode::MetaCmdResponse_ListNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmdResponse_ListNode::InitAsDefaultInstance() {
  nodes_ = const_cast< ::ZPMeta::Nodes*>(&::ZPMeta::Nodes::default_instance());
}

MetaCmdResponse_ListNode::MetaCmdResponse_ListNode(const MetaCmdResponse_ListNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmdResponse_ListNode::SharedCtor() {
  _cached_size_ = 0;
  nodes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmdResponse_ListNode::~MetaCmdResponse_ListNode() {
  SharedDtor();
}

void MetaCmdResponse_ListNode::SharedDtor() {
  if (this != default_instance_) {
    delete nodes_;
  }
}

void MetaCmdResponse_ListNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmdResponse_ListNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmdResponse_ListNode_descriptor_;
}

const MetaCmdResponse_ListNode& MetaCmdResponse_ListNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmdResponse_ListNode* MetaCmdResponse_ListNode::default_instance_ = NULL;

MetaCmdResponse_ListNode* MetaCmdResponse_ListNode::New() const {
  return new MetaCmdResponse_ListNode;
}

void MetaCmdResponse_ListNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodes()) {
      if (nodes_ != NULL) nodes_->::ZPMeta::Nodes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmdResponse_ListNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ZPMeta.Nodes nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmdResponse_ListNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ZPMeta.Nodes nodes = 1;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmdResponse_ListNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ZPMeta.Nodes nodes = 1;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmdResponse_ListNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ZPMeta.Nodes nodes = 1;
    if (has_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmdResponse_ListNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmdResponse_ListNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmdResponse_ListNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmdResponse_ListNode::MergeFrom(const MetaCmdResponse_ListNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodes()) {
      mutable_nodes()->::ZPMeta::Nodes::MergeFrom(from.nodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmdResponse_ListNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmdResponse_ListNode::CopyFrom(const MetaCmdResponse_ListNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmdResponse_ListNode::IsInitialized() const {

  if (has_nodes()) {
    if (!this->nodes().IsInitialized()) return false;
  }
  return true;
}

void MetaCmdResponse_ListNode::Swap(MetaCmdResponse_ListNode* other) {
  if (other != this) {
    std::swap(nodes_, other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmdResponse_ListNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmdResponse_ListNode_descriptor_;
  metadata.reflection = MetaCmdResponse_ListNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmdResponse_ListMeta::kNodesFieldNumber;
#endif  // !_MSC_VER

MetaCmdResponse_ListMeta::MetaCmdResponse_ListMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmdResponse_ListMeta::InitAsDefaultInstance() {
  nodes_ = const_cast< ::ZPMeta::MetaNodes*>(&::ZPMeta::MetaNodes::default_instance());
}

MetaCmdResponse_ListMeta::MetaCmdResponse_ListMeta(const MetaCmdResponse_ListMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmdResponse_ListMeta::SharedCtor() {
  _cached_size_ = 0;
  nodes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmdResponse_ListMeta::~MetaCmdResponse_ListMeta() {
  SharedDtor();
}

void MetaCmdResponse_ListMeta::SharedDtor() {
  if (this != default_instance_) {
    delete nodes_;
  }
}

void MetaCmdResponse_ListMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmdResponse_ListMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmdResponse_ListMeta_descriptor_;
}

const MetaCmdResponse_ListMeta& MetaCmdResponse_ListMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmdResponse_ListMeta* MetaCmdResponse_ListMeta::default_instance_ = NULL;

MetaCmdResponse_ListMeta* MetaCmdResponse_ListMeta::New() const {
  return new MetaCmdResponse_ListMeta;
}

void MetaCmdResponse_ListMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodes()) {
      if (nodes_ != NULL) nodes_->::ZPMeta::MetaNodes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmdResponse_ListMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.MetaNodes nodes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmdResponse_ListMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.MetaNodes nodes = 1;
  if (has_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmdResponse_ListMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.MetaNodes nodes = 1;
  if (has_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmdResponse_ListMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.MetaNodes nodes = 1;
    if (has_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmdResponse_ListMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmdResponse_ListMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmdResponse_ListMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmdResponse_ListMeta::MergeFrom(const MetaCmdResponse_ListMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodes()) {
      mutable_nodes()->::ZPMeta::MetaNodes::MergeFrom(from.nodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmdResponse_ListMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmdResponse_ListMeta::CopyFrom(const MetaCmdResponse_ListMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmdResponse_ListMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nodes()) {
    if (!this->nodes().IsInitialized()) return false;
  }
  return true;
}

void MetaCmdResponse_ListMeta::Swap(MetaCmdResponse_ListMeta* other) {
  if (other != this) {
    std::swap(nodes_, other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmdResponse_ListMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmdResponse_ListMeta_descriptor_;
  metadata.reflection = MetaCmdResponse_ListMeta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MetaCmdResponse::kTypeFieldNumber;
const int MetaCmdResponse::kCodeFieldNumber;
const int MetaCmdResponse::kMsgFieldNumber;
const int MetaCmdResponse::kPingFieldNumber;
const int MetaCmdResponse::kPullFieldNumber;
const int MetaCmdResponse::kListTableFieldNumber;
const int MetaCmdResponse::kListNodeFieldNumber;
const int MetaCmdResponse::kListMetaFieldNumber;
#endif  // !_MSC_VER

MetaCmdResponse::MetaCmdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaCmdResponse::InitAsDefaultInstance() {
  ping_ = const_cast< ::ZPMeta::MetaCmdResponse_Ping*>(&::ZPMeta::MetaCmdResponse_Ping::default_instance());
  pull_ = const_cast< ::ZPMeta::MetaCmdResponse_Pull*>(&::ZPMeta::MetaCmdResponse_Pull::default_instance());
  list_table_ = const_cast< ::ZPMeta::MetaCmdResponse_ListTable*>(&::ZPMeta::MetaCmdResponse_ListTable::default_instance());
  list_node_ = const_cast< ::ZPMeta::MetaCmdResponse_ListNode*>(&::ZPMeta::MetaCmdResponse_ListNode::default_instance());
  list_meta_ = const_cast< ::ZPMeta::MetaCmdResponse_ListMeta*>(&::ZPMeta::MetaCmdResponse_ListMeta::default_instance());
}

MetaCmdResponse::MetaCmdResponse(const MetaCmdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaCmdResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_ = NULL;
  pull_ = NULL;
  list_table_ = NULL;
  list_node_ = NULL;
  list_meta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaCmdResponse::~MetaCmdResponse() {
  SharedDtor();
}

void MetaCmdResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete ping_;
    delete pull_;
    delete list_table_;
    delete list_node_;
    delete list_meta_;
  }
}

void MetaCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaCmdResponse_descriptor_;
}

const MetaCmdResponse& MetaCmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zp_5fmeta_2eproto();
  return *default_instance_;
}

MetaCmdResponse* MetaCmdResponse::default_instance_ = NULL;

MetaCmdResponse* MetaCmdResponse::New() const {
  return new MetaCmdResponse;
}

void MetaCmdResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_ping()) {
      if (ping_ != NULL) ping_->::ZPMeta::MetaCmdResponse_Ping::Clear();
    }
    if (has_pull()) {
      if (pull_ != NULL) pull_->::ZPMeta::MetaCmdResponse_Pull::Clear();
    }
    if (has_list_table()) {
      if (list_table_ != NULL) list_table_->::ZPMeta::MetaCmdResponse_ListTable::Clear();
    }
    if (has_list_node()) {
      if (list_node_ != NULL) list_node_->::ZPMeta::MetaCmdResponse_ListNode::Clear();
    }
    if (has_list_meta()) {
      if (list_meta_ != NULL) list_meta_->::ZPMeta::MetaCmdResponse_ListMeta::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ZPMeta.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZPMeta::Type_IsValid(value)) {
            set_type(static_cast< ::ZPMeta::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required .ZPMeta.StatusCode code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ZPMeta::StatusCode_IsValid(value)) {
            set_code(static_cast< ::ZPMeta::StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ping;
        break;
      }

      // optional .ZPMeta.MetaCmdResponse.Ping ping = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pull;
        break;
      }

      // optional .ZPMeta.MetaCmdResponse.Pull pull = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pull:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_table;
        break;
      }

      // optional .ZPMeta.MetaCmdResponse.ListTable list_table = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_node;
        break;
      }

      // optional .ZPMeta.MetaCmdResponse.ListNode list_node = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_list_meta;
        break;
      }

      // optional .ZPMeta.MetaCmdResponse.ListMeta list_meta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ZPMeta.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ZPMeta.StatusCode code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  // optional .ZPMeta.MetaCmdResponse.Ping ping = 4;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ping(), output);
  }

  // optional .ZPMeta.MetaCmdResponse.Pull pull = 5;
  if (has_pull()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pull(), output);
  }

  // optional .ZPMeta.MetaCmdResponse.ListTable list_table = 6;
  if (has_list_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_table(), output);
  }

  // optional .ZPMeta.MetaCmdResponse.ListNode list_node = 7;
  if (has_list_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_node(), output);
  }

  // optional .ZPMeta.MetaCmdResponse.ListMeta list_meta = 8;
  if (has_list_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->list_meta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaCmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ZPMeta.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ZPMeta.StatusCode code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // optional .ZPMeta.MetaCmdResponse.Ping ping = 4;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ping(), target);
  }

  // optional .ZPMeta.MetaCmdResponse.Pull pull = 5;
  if (has_pull()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pull(), target);
  }

  // optional .ZPMeta.MetaCmdResponse.ListTable list_table = 6;
  if (has_list_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_table(), target);
  }

  // optional .ZPMeta.MetaCmdResponse.ListNode list_node = 7;
  if (has_list_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_node(), target);
  }

  // optional .ZPMeta.MetaCmdResponse.ListMeta list_meta = 8;
  if (has_list_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->list_meta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaCmdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ZPMeta.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .ZPMeta.StatusCode code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .ZPMeta.MetaCmdResponse.Ping ping = 4;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }

    // optional .ZPMeta.MetaCmdResponse.Pull pull = 5;
    if (has_pull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pull());
    }

    // optional .ZPMeta.MetaCmdResponse.ListTable list_table = 6;
    if (has_list_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_table());
    }

    // optional .ZPMeta.MetaCmdResponse.ListNode list_node = 7;
    if (has_list_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_node());
    }

    // optional .ZPMeta.MetaCmdResponse.ListMeta list_meta = 8;
    if (has_list_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_meta());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaCmdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaCmdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaCmdResponse::MergeFrom(const MetaCmdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_ping()) {
      mutable_ping()->::ZPMeta::MetaCmdResponse_Ping::MergeFrom(from.ping());
    }
    if (from.has_pull()) {
      mutable_pull()->::ZPMeta::MetaCmdResponse_Pull::MergeFrom(from.pull());
    }
    if (from.has_list_table()) {
      mutable_list_table()->::ZPMeta::MetaCmdResponse_ListTable::MergeFrom(from.list_table());
    }
    if (from.has_list_node()) {
      mutable_list_node()->::ZPMeta::MetaCmdResponse_ListNode::MergeFrom(from.list_node());
    }
    if (from.has_list_meta()) {
      mutable_list_meta()->::ZPMeta::MetaCmdResponse_ListMeta::MergeFrom(from.list_meta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaCmdResponse::CopyFrom(const MetaCmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaCmdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pull()) {
    if (!this->pull().IsInitialized()) return false;
  }
  if (has_list_node()) {
    if (!this->list_node().IsInitialized()) return false;
  }
  if (has_list_meta()) {
    if (!this->list_meta().IsInitialized()) return false;
  }
  return true;
}

void MetaCmdResponse::Swap(MetaCmdResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(ping_, other->ping_);
    std::swap(pull_, other->pull_);
    std::swap(list_table_, other->list_table_);
    std::swap(list_node_, other->list_node_);
    std::swap(list_meta_, other->list_meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaCmdResponse_descriptor_;
  metadata.reflection = MetaCmdResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZPMeta

// @@protoc_insertion_point(global_scope)
